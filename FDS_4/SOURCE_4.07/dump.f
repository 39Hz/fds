      MODULE DUMP
C
C Dump data to various files in single precision. 
C
      USE PREC
      USE VARS
      USE CONS
      USE TRAN
      USE ISODEFS
      USE COMPRESSDEFS
      USE RAD, ONLY: ANGLE_INCREMENT,TIME_STEP_INCREMENT,
     .               NRA,NRT,RSA,NRP,NSB,PATH
      USE PACKER
C
      IMPLICIT NONE
C
      PRIVATE
      REAL(EB) TMP_G,UU,VV,WW,DENS,REYN,DROPMASS,
     .         WFA,YYHAT,XKAP,HAVG,QDIM,VEL2,WDINT,MUINT,
     .         NUINT,DDD,RVC,XI,YJ,ZK,UIIINT,RSUM_TOTAL
      REAL(EB) WP1,VP1,UP1,QQQ,ZZ,U2,V2,W2,HQ2,DZZ,Y_EXTRA,
     .         EXT_COEF,IFAC,Y_STATE_INT
      INTEGER NQT,ITM,ITM1,IQ,N,IIG,JJG,KKG,IYY1,IYY2,ERROR,
     .        I1,J1,K1,I,J,K,I2,J2,K2,
     .        IZERO,II,JJ,KK,NN,NF,IBC,
     .        I2B,I1B,IND,IW,IC,IPC
      CHARACTER(50) FN06,FN10,FN11,FN12,FN13,FN14,FN15,FNSF,FN16,
     .              FN18,FN19,FN90,FN91,FN111
      CHARACTER(50), DIMENSION(3,100) :: SMOKE3D_FILE
      CHARACTER(50) TCFORM
      LOGICAL EX
      TYPE (MESH_TYPE), POINTER :: M
      TYPE(DROPLET_TYPE), POINTER :: DR
      TYPE(OBSTRUCTION_TYPE), POINTER :: OB
      TYPE(VENTS_TYPE), POINTER :: VT
      TYPE(LAGRANGIAN_TYPE), POINTER :: LP
      TYPE(THERMOCOUPLE_TYPE), POINTER :: TC
      REAL(FB) SARX,SARY,SWPAR,STIME,ONE,ZERO
      PUBLIC INITIALIZE_GLOBAL_DUMPS,INITIALIZE_MESH_DUMPS,
     .       DUMP_SF,TIMINGS,FLUSH_BUFFERS,DUMP_PART,
     .       UPDATE_TC,DUMP_TC,DUMP_ISO,DUMP_BF,UPDATE_HRR,DUMP_HRR,
     .       UPDATE_MASS,DUMP_MASS,
     .       DUMP_CORE,READ_CORE,WRITE_DIAGNOSTICS,
     .       WRITE_SMOKEVIEW_FILE,
     .       DUMP_DETECTORS,OPEN_INPUT_FILE,DUMP_SMOKE3D
C
C
      CONTAINS
C
C
      SUBROUTINE OPEN_INPUT_FILE
C
      INTEGER IOS
      CHARACTER(60) MESSAGE
C
      OPEN(LU5,FILE='fds.data',FORM='FORMATTED',STATUS='OLD',
     .     ACTION='READ',IOSTAT=IOS)
      IF (IOS.NE.0) CALL SHUTDOWN('ERROR: fds.data does not exist')
      READ(LU5,'(A)',IOSTAT=IOS,ERR=1) INPUT_FILE
    1 IF (IOS.NE.0) CALL SHUTDOWN('ERROR: Failure to read fds.data')
      CLOSE(LU5)
C
      IF (INPUT_FILE.EQ.'null') THEN
        WRITE(MESSAGE,'(A)') 'ERROR: No input file given in fds.data'
        CALL SHUTDOWN(MESSAGE)
        ENDIF
C
      INQUIRE(FILE=INPUT_FILE,EXIST=EX)
      IF (.NOT.EX) THEN
        WRITE(MESSAGE,'(A)') 'ERROR: '//TRIM(INPUT_FILE)//
     .                       ' does not exist.'
        CALL SHUTDOWN(MESSAGE)
        ENDIF
C
      OPEN(LU5,FILE=INPUT_FILE,FORM='FORMATTED',STATUS='OLD',
     .     ACTION='READ',IOSTAT=IOS)
      IF (IOS.NE.0) THEN
        WRITE(MESSAGE,'(A)') 'ERROR: '//TRIM(INPUT_FILE)//
     .                       ' does not exist.'
        CALL SHUTDOWN(MESSAGE)
        ENDIF
C
      END SUBROUTINE OPEN_INPUT_FILE
C
C
      SUBROUTINE INITIALIZE_GLOBAL_DUMPS
C
      INTEGER :: NN
      CHARACTER(30), DIMENSION(20) :: LABEL
C
C Open and initialize all files that are not tied to a particular mesh
C
      TNOW=SECOND() 
C
      WRITE(FN06,'(A,A)') TRIM(CHID),'.out'
      WRITE(FN11,'(A,A)') TRIM(CHID),'_tc.csv'
      WRITE(FN12,'(A,A)') TRIM(CHID),'_spk.csv'
      WRITE(FN13,'(A,A)') TRIM(CHID),'.xyz'
      WRITE(FN15,'(A,A)') TRIM(CHID),'_hd.csv'
      WRITE(FN16,'(A,A)') TRIM(CHID),'_state.csv'
      WRITE(FN18,'(A,A)') TRIM(CHID),'_hrr.csv'
      WRITE(FN19,'(A,A)') TRIM(CHID),'_mass.csv'
c
      WRITE(FN111,'(A,A)') TRIM(CHID),'_smkdt.csv'       
C Open and initialize diagnostic output file
C
      IF (APPEND) THEN
      INQUIRE(FILE=FN06,EXIST=EX)
      IF (EX) OPEN(LU6,FILE=FN06,FORM='FORMATTED',STATUS='OLD',
     .             POSITION='APPEND')
      ELSE
      OPEN(LU6,FILE=FN06,FORM='FORMATTED',STATUS='REPLACE')
      ENDIF
C
      CALL INITIALIZE_DIAGNOSTIC_FILE
C
C Initialize thermocouple data file (CHID_tc.csv)
C
      IF (NTC.GT.0) THEN
C
      IF (APPEND) THEN
      OPEN(LU11,FILE=FN11,FORM='FORMATTED',STATUS='OLD',RECL=5000,
     .     POSITION='APPEND')
      ELSE
      OPEN(LU11,FILE=FN11,FORM='FORMATTED',STATUS='REPLACE',RECL=5000)
      WRITE(LU11,'(I5)') NTC
      WRITE(TCFORM,'(A,I4.4,A)') "(",NTC,"(A,','),A)"
      WRITE(LU11,TCFORM) 'TIME',(TRIM(THERMOCOUPLE(N)%LABEL),N=1,NTC)
      WRITE(TCFORM,'(A,I4.4,A)') "(",NTC,"(A,','),A)"
      WRITE(LU11,TCFORM) 'TIME',
     .     (TRIM(SDATA(THERMOCOUPLE(N)%INDEX)),N=1,NTC)
      WRITE(TCFORM,'(A,I4.4,A)') "(",NTC,"(A,','),A)"
      WRITE(LU11,TCFORM) 's',
     .     (TRIM(UDATA(THERMOCOUPLE(N)%INDEX)),N=1,NTC)
      ENDIF
C
      ENDIF
C
C Initialize sprinkler data file (CHID_spk.csv)
C
      IF (NSPR.GT.0) THEN
      IF (APPEND) THEN
      OPEN(LU12,FILE=FN12,FORM='FORMATTED',STATUS='OLD',RECL=5000,
     .     POSITION='APPEND')
      ELSE
      OPEN(LU12,FILE=FN12,FORM='FORMATTED',STATUS='REPLACE',RECL=5000)
      WRITE(LU12,'(I5)') NSPR
      WRITE(TCFORM,'(A,I4.4,A)') "(",NSPR,"(A,','),A)"
      WRITE(LU12,TCFORM) 'TIME',(TRIM(SPRINKLER_HEAD(N)%LABEL),N=1,NSPR)
      WRITE(TCFORM,'(A,I4.4,A)') "(",NSPR,"(A,','),A)"
      WRITE(LU12,TCFORM) 'TIME',('TEMP',N=1,NSPR)
      WRITE(LU12,TCFORM) 's',('C',N=1,NSPR)
      ENDIF
      ENDIF
C
C Initialize heat detector data file (CHID_hd.csv)
C
      IF (NHD.GT.0) THEN
      IF (APPEND) THEN
      OPEN(LU15,FILE=FN15,FORM='FORMATTED',STATUS='OLD',RECL=5000,
     .     POSITION='APPEND')
      ELSE
      OPEN(LU15,FILE=FN15,FORM='FORMATTED',STATUS='REPLACE',RECL=5000)
      WRITE(LU15,'(I5)') NHD
      WRITE(TCFORM,'(A,I4.4,A)') "(",MIN(255,NHD),"(A,','),A)"
      WRITE(LU15,TCFORM) 'TIME',(TRIM(HEAT_DETECTOR(N)%LABEL),N=1,NHD)
      WRITE(TCFORM,'(A,I4.4,A)') "(",MIN(255,NHD),"(A,','),A)"
      WRITE(LU15,TCFORM) 'TIME',('TEMP',N=1,NHD)
      WRITE(LU15,TCFORM) 's',('C',N=1,NHD)
      ENDIF
      ENDIF
c
c Initialize smoke detector data file (CHID_smoke.csv)
c
      IF (NSD.GT.0) THEN
      IF (APPEND) THEN
      OPEN(LU111,FILE=FN111,FORM='FORMATTED',STATUS='OLD',RECL=5000,
     .     POSITION='APPEND')
      ELSE
      OPEN(LU111,FILE=FN111,FORM='FORMATTED',STATUS='REPLACE',RECL=5000)
      WRITE(LU111,'(I5)') NSD
      WRITE(TCFORM,'(A,I4.4,A)') "(",NSD,"(A,','),A)"
      WRITE(LU111,TCFORM) 'TIME',(TRIM(SMOKE_DETECTOR(N)%LABEL),N=1,NSD)
      WRITE(TCFORM,'(A,I4.4,A)') "(",NSD,"(A,','),A)"
      WRITE(LU111,TCFORM) 'TIME',('OBSCURATION_PER_METER',N=1,NSD)
      WRITE(LU111,TCFORM) 's',('1/m',N=1,NSD)
      ENDIF
      ENDIF
C
C Open heat release rate file CHID_hrr.csv
C
      IF (APPEND) THEN
      OPEN(LU18,FILE=FN18,FORM='FORMATTED',STATUS='OLD',
     .     POSITION='APPEND')
      ELSE
      OPEN(LU18,FILE=FN18,FORM='FORMATTED',STATUS='REPLACE')
      WRITE(LU18,*) 5
      WRITE(TCFORM,'(A,I4.4,A)') "(",5,"(A,','),A)"
      WRITE(LU18,TCFORM) 'TIME','HRR','RAD LOSS','CONV LOSS',
     .                   'COND LOSS','BURN RATE'
      WRITE(LU18,TCFORM) 's','kW','kW','kW','kW','kg/s'
      ENDIF
C
C Write out info about Mixture Fraction-based state relationships
C
      IF (MIXTURE_FRACTION) THEN
      DZZ = 1./10000.
      OPEN(LU16,FILE=FN16,FORM='FORMATTED',STATUS='REPLACE')
      WRITE(LU16,'(I5)') 9
      WRITE(TCFORM,'(A,I4.4,A)') "(",9,"(A,','),A)"
      WRITE(LU16,TCFORM) 'Z','Fuel','O2','N2','H2O','CO2','CO',
     .                 'H2','Soot','Wgt'
      WRITE(LU16,TCFORM) ' ',('kg/kg',N=1,8),'g/mol'
      WRITE(LU16,'(9(ES12.4,","),ES12.4)') 
     .         (K*DZZ,(Y_STATE(K,J),J=1,8),MW_AVG(K),K=0,10000,10)
      CLOSE(LU16)
      ENDIF
C
C Open species mass file
C
      IF (NSPEC.GT.0) THEN
      IF (APPEND) THEN
      OPEN(LU19,FILE=FN19,FORM='FORMATTED',STATUS='OLD',
     .     POSITION='APPEND')
      ELSE
      OPEN(LU19,FILE=FN19,FORM='FORMATTED',STATUS='REPLACE')
      IF (MIXTURE_FRACTION) THEN
      LABEL(1) = 'Time'
      LABEL(2) = 'Total'
      LABEL(3) = 'Fuel'
      LABEL(4) = 'O2'
      LABEL(5) = 'N2'
      LABEL(6) = 'H2O'
      LABEL(7) = 'CO2'
      LABEL(8) = 'CO'
      LABEL(9) = 'H2'
      LABEL(10)= 'Soot'
      NN = 10
      DO N=1,NSPEC
      IF (SPECIES_ID(N).NE.'MIXTURE_FRACTION') THEN
         NN = NN+1
         LABEL(NN) = SPECIES_ID(N)
         ENDIF
      ENDDO
      WRITE(LU19,'(I5)') NN-1
      WRITE(TCFORM,'(A,I4.4,A)') "(",NN-1,"(A,','),A)"
      WRITE(LU19,TCFORM) (TRIM(LABEL(N)),N=1,NN)
      WRITE(LU19,TCFORM) 's',('kg',N=1,NN-1)
      ELSE
      WRITE(LU19,'(I5)') NSPEC+1
      WRITE(TCFORM,'(A,I4.4,A)') "(",NSPEC+1,"(A,','),A)"
      WRITE(LU19,TCFORM) 'TIME','Total',(TRIM(SPECIES_ID(N)),N=1,NSPEC)
      WRITE(LU19,TCFORM) 's',('kg',N=0,NSPEC)
      ENDIF
      ENDIF
      ENDIF
C
      TUSED(7,:) = TUSED(7,:) + SECOND() - TNOW
      END SUBROUTINE INITIALIZE_GLOBAL_DUMPS
C
C
      SUBROUTINE INITIALIZE_MESH_DUMPS(NM)
C
      INTEGER, INTENT(IN) :: NM
      INTEGER :: IOR
      LOGICAL :: SOLID_ONLY
      CHARACTER(30) LABEL1,LABEL2,LABEL3,CFORM
      TYPE (SPRINKLER_HEAD_TYPE), POINTER :: SH
C
      TNOW=SECOND() 
C
      M => MESH(NM)
C
      IBAR=>M%IBAR ; JBAR=>M%JBAR ; KBAR=>M%KBAR
      IBP1=>M%IBP1 ; JBP1=>M%JBP1 ; KBP1=>M%KBP1
C
C Compute grid coords in single precision for output
C
      ALLOCATE(M%XPLT(0:IBAR),STAT=IZERO)
      CALL ChkMemErr('DUMP','XPLT',IZERO)
      ALLOCATE(M%YPLT(0:JBAR),STAT=IZERO)
      CALL ChkMemErr('DUMP','YPLT',IZERO)
      ALLOCATE(M%ZPLT(0:KBAR),STAT=IZERO)
      CALL ChkMemErr('DUMP','ZPLT',IZERO)
C
      DO I=0,IBAR
      M%XPLT(I) = M%X(I)
      ENDDO
      DO J=0,JBAR
      M%YPLT(J) = M%Y(J)
      ENDDO
      DO K=0,KBAR
      M%ZPLT(K) = M%Z(K)
      ENDDO
C
C Initialize PLOT3D grid file (CHID.xyz)
C
      ALLOCATE(M%IBLK(0:IBAR,0:JBAR,0:KBAR),STAT=IZERO)
      CALL ChkMemErr('DUMP','IBLK',IZERO)
      ALLOCATE(M%QQ(0:IBP1,0:JBP1,0:KBP1,5),STAT=IZERO)
      CALL ChkMemErr('DUMP','QQ',IZERO) ; M%QQ=0.
C
      WRITE_XYZ_FILE: IF (WRITE_XYZ .AND.
     .     .NOT.EVACUATION_ONLY(NM)) THEN
C
      IF (NMESHES.GT.1)
     .WRITE(FN13,'(A,A,I2.2,A)') TRIM(CHID),'_',NM,'.xyz'
      IF (NMESHES.EQ.1)
     .WRITE(FN13,'(A,A)') TRIM(CHID),'.xyz'
      OPEN(LU13,FILE=FN13,FORM='UNFORMATTED',STATUS='REPLACE')
C
      DO K=0,KBAR
      DO J=0,JBAR
      DO I=0,IBAR
      IF (M%SOLID(M%ICA(I,J,K))     .AND. 
     .    M%SOLID(M%ICA(I+1,J,K))   .AND.
     .    M%SOLID(M%ICA(I,J+1,K))   .AND. 
     .    M%SOLID(M%ICA(I,J,K+1))   .AND.
     .    M%SOLID(M%ICA(I+1,J+1,K)) .AND. 
     .    M%SOLID(M%ICA(I+1,J,K+1)) .AND.
     .    M%SOLID(M%ICA(I,J+1,K+1)) .AND. 
     .    M%SOLID(M%ICA(I+1,J+1,K+1)) ) THEN
          M%IBLK(I,J,K) = 0
          ELSE
          M%IBLK(I,J,K) = 1
          ENDIF
      ENDDO   
      ENDDO   
      ENDDO   
C
      WRITE(LU13) IBP1,JBP1,KBP1
      WRITE(LU13) 
     .          (((M%XPLT(I),I=0,IBAR),J=0,JBAR),K=0,KBAR),
     .          (((M%YPLT(J),I=0,IBAR),J=0,JBAR),K=0,KBAR),
     .          (((M%ZPLT(K),I=0,IBAR),J=0,JBAR),K=0,KBAR)
     .         ,(((M%IBLK(I,J,K),I=0,IBAR),J=0,JBAR),K=0,KBAR)
C
      CLOSE(LU13)
      IF (M%N_STRINGS+2.GT.M%N_STRINGS_MAX) THEN
         CALL RE_ALLOCATE_STRINGS(NM)
         ENDIF
      M%N_STRINGS = M%N_STRINGS + 1
      WRITE(M%STRING(M%N_STRINGS),'(A)') 'XYZ'
      M%N_STRINGS = M%N_STRINGS + 1
      WRITE(M%STRING(M%N_STRINGS),'(A)') FN13  
C
      ENDIF WRITE_XYZ_FILE
C
C Re-allocate IBLK array for use with isosurface generation
C
      DEALLOCATE(M%IBLK)
      ALLOCATE(M%IBLK(1:IBAR,1:JBAR,1:KBAR),STAT=IZERO)
      CALL ChkMemErr('DUMP','IBLK',IZERO)
C
C Initialize isosurface file
C
      IF (.NOT.APPEND .AND. .NOT.EVACUATION_ONLY(NM)) THEN
C
      DO N=1,NIF
      IF (NMESHES.GT.1)
     .WRITE(FNSF,'(A,A,I2.2,A,I2.2,A)') TRIM(CHID),'_',NM,'_',N,'.iso'
      IF (NMESHES.EQ.1)
     .WRITE(FNSF,'(A,A,I2.2,A)') TRIM(CHID),'_',N,'.iso'
C
      IF (M%N_STRINGS+5.GT.M%N_STRINGS_MAX) CALL RE_ALLOCATE_STRINGS(NM)
      M%N_STRINGS = M%N_STRINGS + 1
      IF (INDIF2(N).EQ.0) THEN
         WRITE(M%STRING(M%N_STRINGS),'(A,1X,I2)') 'ISOF',NM
      ELSE
         WRITE(M%STRING(M%N_STRINGS),'(A,1X,I2)') 'TISOF',NM
      ENDIF
      M%N_STRINGS = M%N_STRINGS + 1
      WRITE(M%STRING(M%N_STRINGS),'(A)') FNSF
      M%N_STRINGS = M%N_STRINGS + 1
      WRITE(M%STRING(M%N_STRINGS),'(A)') CDATA(INDIF(N))
      M%N_STRINGS = M%N_STRINGS + 1
      WRITE(M%STRING(M%N_STRINGS),'(A)') SDATA(INDIF(N))
      M%N_STRINGS = M%N_STRINGS + 1
      WRITE(M%STRING(M%N_STRINGS),'(A)') UDATA(INDIF(N))
C
      LABEL1 = TRIM(CDATA(INDIF(N)))//CHAR(0)
      LABEL2 = TRIM(SDATA(INDIF(N)))//CHAR(0)
      LABEL3 = TRIM(UDATA(INDIF(N)))//CHAR(0)
      ERROR = 0
      IF (INDIF2(N).EQ.0)
     .CALL ISOHEADER(TRIM(FNSF)//CHAR(0),LABEL1,LABEL2,LABEL3,
     .     ISOLEVEL(1:NLEVELS(N),N),NLEVELS(N),ERROR)
      IF (INDIF2(N).NE.0)
     .CALL TISOHEADER(TRIM(FNSF)//CHAR(0),LABEL1,LABEL2,LABEL3,
     .     ISOLEVEL(1:NLEVELS(N),N),NLEVELS(N),ERROR)
      ENDDO
C
      ENDIF
C
C Initialize Smoke3d file
C
      SMOKE3D_INITIALIZATION: IF (SMOKE3D .AND.
     .     .NOT.EVACUATION_ONLY(NM)) THEN
C
      IF (NMESHES.GT.1)
     .WRITE(SMOKE3D_FILE(1,NM),'(A,A,I2.2,A)')
     .TRIM(CHID),'_',NM,'_01.s3d'
      IF (NMESHES.EQ.1)
     .WRITE(SMOKE3D_FILE(1,NM),'(A,A)') TRIM(CHID),'_01.s3d'
      IF (.NOT.APPEND) THEN
      IF (M%N_STRINGS+5.GT.M%N_STRINGS_MAX) CALL RE_ALLOCATE_STRINGS(NM)
      M%N_STRINGS = M%N_STRINGS + 1
      WRITE(M%STRING(M%N_STRINGS),'(A,1X,I4)') 'SMOKE3D',NM
      M%N_STRINGS = M%N_STRINGS + 1
      WRITE(M%STRING(M%N_STRINGS),'(A)') SMOKE3D_FILE(1,NM)
      M%N_STRINGS = M%N_STRINGS + 1
      WRITE(M%STRING(M%N_STRINGS),'(A)') CDATA(148)
      M%N_STRINGS = M%N_STRINGS + 1
      WRITE(M%STRING(M%N_STRINGS),'(A)') SDATA(148)
      M%N_STRINGS = M%N_STRINGS + 1
      WRITE(M%STRING(M%N_STRINGS),'(A)') UDATA(148)
      CALL SMOKE3DHEADER(TRIM(SMOKE3D_FILE(1,NM))//CHAR(0),
     .                   0,M%IBAR,0,M%JBAR,0,M%KBAR)
      ENDIF
C
      IF (NMESHES.GT.1)
     .WRITE(SMOKE3D_FILE(2,NM),'(A,A,I2.2,A)')
     .TRIM(CHID),'_',NM,'_02.s3d'
      IF (NMESHES.EQ.1)
     .WRITE(SMOKE3D_FILE(2,NM),'(A,A)') TRIM(CHID),'_02.s3d'
      IF (.NOT.APPEND) THEN
      IF (M%N_STRINGS+5.GT.M%N_STRINGS_MAX) CALL RE_ALLOCATE_STRINGS(NM)
      M%N_STRINGS = M%N_STRINGS + 1
      WRITE(M%STRING(M%N_STRINGS),'(A,1X,I4)') 'SMOKE3D',NM
      M%N_STRINGS = M%N_STRINGS + 1
      WRITE(M%STRING(M%N_STRINGS),'(A)') SMOKE3D_FILE(2,NM)
      M%N_STRINGS = M%N_STRINGS + 1
      WRITE(M%STRING(M%N_STRINGS),'(A)') CDATA(11)
      M%N_STRINGS = M%N_STRINGS + 1
      WRITE(M%STRING(M%N_STRINGS),'(A)') SDATA(11)
      M%N_STRINGS = M%N_STRINGS + 1
      WRITE(M%STRING(M%N_STRINGS),'(A)') UDATA(11)
      CALL SMOKE3DHEADER(TRIM(SMOKE3D_FILE(2,NM))//CHAR(0),
     .                   0,M%IBAR,0,M%JBAR,0,M%KBAR)
      ENDIF
C
      WATER_VAPOR_3D: IF (IWATER.GT.0) THEN
      IF (NMESHES.GT.1)
     .WRITE(SMOKE3D_FILE(3,NM),'(A,A,I2.2,A)')
     .TRIM(CHID),'_',NM,'_03.s3d'
      IF (NMESHES.EQ.1)
     .WRITE(SMOKE3D_FILE(3,NM),'(A,A)') TRIM(CHID),'_03.s3d'
      IF (.NOT.APPEND) THEN
      IF (M%N_STRINGS+5.GT.M%N_STRINGS_MAX) CALL RE_ALLOCATE_STRINGS(NM)
      M%N_STRINGS = M%N_STRINGS + 1
      WRITE(M%STRING(M%N_STRINGS),'(A,1X,I4)') 'SMOKE3D',NM
      M%N_STRINGS = M%N_STRINGS + 1
      WRITE(M%STRING(M%N_STRINGS),'(A)') SMOKE3D_FILE(3,NM)
      M%N_STRINGS = M%N_STRINGS + 1
      WRITE(M%STRING(M%N_STRINGS),'(A)') 'WATER VAPOR'
      M%N_STRINGS = M%N_STRINGS + 1
      WRITE(M%STRING(M%N_STRINGS),'(A)') 'water'
      M%N_STRINGS = M%N_STRINGS + 1
      WRITE(M%STRING(M%N_STRINGS),'(A)') 'kg/kg'
      CALL SMOKE3DHEADER(TRIM(SMOKE3D_FILE(3,NM))//CHAR(0),
     .                   0,M%IBAR,0,M%JBAR,0,M%KBAR)
      ENDIF
      ENDIF WATER_VAPOR_3D
C
      ENDIF SMOKE3D_INITIALIZATION
C
C Initialize Slice Files
C
      IF (M%LAYER_HEIGHT) THEN
      ALLOCATE(M%RAD_UP(0:M%IBP1,0:M%JBP1)) ; M%RAD_UP = SIGMA*TMPA4
      ALLOCATE(M%KAP_UP(0:M%IBP1,0:M%JBP1)) ; M%KAP_UP = 0.
      ALLOCATE(M%TMP_UP(0:M%IBP1,0:M%JBP1)) ; M%TMP_UP = TMPA
      ALLOCATE(M%TMP_LOW(0:M%IBP1,0:M%JBP1)); M%TMP_LOW= TMPA
      ALLOCATE(M%Z_INT(0:M%IBP1,0:M%JBP1))  ; M%Z_INT  = M%ZF-M%ZS
      ENDIF
C
      DO N=1,M%NSF
C
      IF (NMESHES.GT.1) THEN
      IF (M%NSF.LT.100) CFORM = '(A,2(A,I2.2),A)'
      IF (M%NSF.GE.100) CFORM = '(A,A,I2.2,A,I3.3,A)'
      WRITE(FNSF,CFORM) TRIM(CHID),'_',NM,'_',N,'.sf'
      ELSE
      IF (M%NSF.LT.100) CFORM = '(A,A,I2.2,A)'
      IF (M%NSF.GE.100) CFORM = '(A,A,I3.3,A)'
      WRITE(FNSF,CFORM) TRIM(CHID),'_',N,'.sf'
      ENDIF
      LUSF = 3000+100*NM + N
C
      IF (APPEND) THEN
C
      OPEN(LUSF,FILE=FNSF,FORM='UNFORMATTED',STATUS='OLD',
     .     POSITION='APPEND')
C
      ELSE
C
      I1   = M%ISP1(N)
      I2   = M%ISP2(N)
      J1   = M%JSP1(N)
      J2   = M%JSP2(N)
      K1   = M%KSP1(N)
      K2   = M%KSP2(N)
C
      IF (M%N_STRINGS+5.GT.M%N_STRINGS_MAX) CALL RE_ALLOCATE_STRINGS(NM)
      M%N_STRINGS = M%N_STRINGS + 1
      WRITE(M%STRING(M%N_STRINGS),'(A,1X,I4)') 'SLCF',NM
      M%N_STRINGS = M%N_STRINGS + 1
      WRITE(M%STRING(M%N_STRINGS),'(A)') FNSF
      M%N_STRINGS = M%N_STRINGS + 1
      WRITE(M%STRING(M%N_STRINGS),'(A)') CDATA(M%INDSP(N))
      M%N_STRINGS = M%N_STRINGS + 1
      WRITE(M%STRING(M%N_STRINGS),'(A)') SDATA(M%INDSP(N))
      M%N_STRINGS = M%N_STRINGS + 1
      WRITE(M%STRING(M%N_STRINGS),'(A)') UDATA(M%INDSP(N))
C
      OPEN(LUSF,FILE=FNSF,FORM='UNFORMATTED',STATUS='REPLACE')
      WRITE(LUSF) CDATA(M%INDSP(N))
      WRITE(LUSF) SDATA(M%INDSP(N))
      WRITE(LUSF) UDATA(M%INDSP(N))
      WRITE(LUSF) I1,I2,J1,J2,K1,K2
C
      ENDIF
      ENDDO   
C
C Initialize Boundary Files
C
      IF_BOUNDARY_FILES: IF (NBF.GT.0 .AND.
     .     .NOT.EVACUATION_ONLY(NM)) THEN
C
      I1B = MAX(IBP1,JBP1)
      I2B = MAX(JBP1,KBP1)
      ALLOCATE(M%PP(0:I1B,0:I2B),STAT=IZERO)
      CALL ChkMemErr('DUMP','PP',IZERO)
      ALLOCATE(M%PPN(0:I1B,0:I2B),STAT=IZERO)
      CALL ChkMemErr('DUMP','PPN',IZERO)
      ALLOCATE(M%IBK(0:I1B,0:I2B),STAT=IZERO)
      CALL ChkMemErr('DUMP','IBK',IZERO)
C
      IF_NOT_APPEND: IF (.NOT.APPEND) THEN
C
      M%INC = 0
C
      DO IW=1,M%NWC
      IOR = M%IJKW(4,IW)
      IF (IW.LE.M%NEWC) THEN
         IF (M%IV(IW).EQ.1) M%INC(IOR,0) = 1 
      ELSE
         II = M%IJKW(1,IW) ; IIG = M%IJKW(6,IW)
         JJ = M%IJKW(2,IW) ; JJG = M%IJKW(7,IW)
         KK = M%IJKW(3,IW) ; KKG = M%IJKW(8,IW)
         SOLID_ONLY = .FALSE.
         IF (IOR.GT.0) CALL GET_OBST(NM, II, JJ, KK,IOR,SOLID_ONLY,NN)
         IF (IOR.LT.0) CALL GET_OBST(NM,IIG,JJG,KKG,IOR,SOLID_ONLY,NN)
         IF (NN.GT.0 .AND. M%IV(IW).EQ.1) M%INC(IOR,NN) = 1
      ENDIF
      ENDDO
C
      M%NPATCH = 0
C
      DO N=0,M%NB
      OB=>M%OBSTRUCTION(N)
      DO I=-3,3
      IF (.NOT.OB%SHOW_BNDF(I)) M%INC(I,N) = 0
      IF (M%INC(I,N).EQ.1) M%NPATCH = M%NPATCH + 1 
      ENDDO
      ENDDO
C
      ENDIF IF_NOT_APPEND
      ENDIF IF_BOUNDARY_FILES
C
      BOUNDARY_FILES: DO NF=1,NBF
C
      IF (M%NPATCH.EQ.0) EXIT BOUNDARY_FILES
      IF (EVACUATION_ONLY(NM)) EXIT BOUNDARY_FILES
C
      LUBF = 1000+100*NM + NF
      IF (NMESHES.GT.1) THEN
      WRITE(FNSF,'(A,A,I2.2,A,I2.2,A)') TRIM(CHID),'_',NM,'_',NF,'.bf'
      ELSE
      WRITE(FNSF,'(A,A,I2.2,A)') TRIM(CHID),'_',NF,'.bf'
      ENDIF
C
      RESTART: IF (APPEND) THEN
C
      OPEN(LUBF,FILE=FNSF,FORM='UNFORMATTED',STATUS='OLD',
     .     POSITION='APPEND')
C
      ELSE RESTART
C
      IF (M%N_STRINGS+5.GT.M%N_STRINGS_MAX) CALL RE_ALLOCATE_STRINGS(NM)
      M%N_STRINGS = M%N_STRINGS + 1
      WRITE(M%STRING(M%N_STRINGS),'(A,1X,2I2)') 'BNDF',NM,1  
      M%N_STRINGS = M%N_STRINGS + 1
      WRITE(M%STRING(M%N_STRINGS),'(A)') FNSF
      M%N_STRINGS = M%N_STRINGS + 1
      WRITE(M%STRING(M%N_STRINGS),'(A)') CDATA(INDBF(NF))
      M%N_STRINGS = M%N_STRINGS + 1
      WRITE(M%STRING(M%N_STRINGS),'(A)') SDATA(INDBF(NF))
      M%N_STRINGS = M%N_STRINGS + 1
      WRITE(M%STRING(M%N_STRINGS),'(A)') UDATA(INDBF(NF))
C
      OPEN(LUBF,FILE=FNSF,FORM='UNFORMATTED',STATUS='REPLACE')
      WRITE(LUBF) CDATA(INDBF(NF))
      WRITE(LUBF) SDATA(INDBF(NF))
      WRITE(LUBF) UDATA(INDBF(NF))
      WRITE(LUBF) M%NPATCH
      IF (M%INC(-3,0).EQ.1) WRITE(LUBF) 0,IBAR,0,JBAR,KBAR,KBAR,-3,0,NM
      IF (M%INC(-2,0).EQ.1) WRITE(LUBF) 0,IBAR,JBAR,JBAR,0,KBAR,-2,0,NM
      IF (M%INC(-1,0).EQ.1) WRITE(LUBF) IBAR,IBAR,0,JBAR,0,KBAR,-1,0,NM
      IF (M%INC( 1,0).EQ.1) WRITE(LUBF)    0,   0,0,JBAR,0,KBAR, 1,0,NM
      IF (M%INC( 2,0).EQ.1) WRITE(LUBF)    0,IBAR,   0,0,0,KBAR, 2,0,NM
      IF (M%INC( 3,0).EQ.1) WRITE(LUBF)    0,IBAR,   0,JBAR,0,0, 3,0,NM
      DO N=1,M%NB
      OB=>M%OBSTRUCTION(N)
      I1 = OB%I1
      I2 = OB%I2
      J1 = OB%J1
      J2 = OB%J2
      K1 = OB%K1
      K2 = OB%K2
      IF (M%INC(-3,N).EQ.1) WRITE(LUBF) I1,I2,J1,J2,K1,K1,-3,N,NM
      IF (M%INC(-2,N).EQ.1) WRITE(LUBF) I1,I2,J1,J1,K1,K2,-2,N,NM
      IF (M%INC(-1,N).EQ.1) WRITE(LUBF) I1,I1,J1,J2,K1,K2,-1,N,NM
      IF (M%INC( 1,N).EQ.1) WRITE(LUBF) I2,I2,J1,J2,K1,K2, 1,N,NM
      IF (M%INC( 2,N).EQ.1) WRITE(LUBF) I1,I2,J2,J2,K1,K2, 2,N,NM
      IF (M%INC( 3,N).EQ.1) WRITE(LUBF) I1,I2,J1,J2,K2,K2, 3,N,NM
      ENDDO
C
      ENDIF RESTART
C
      ENDDO BOUNDARY_FILES
C
C Initialize particle dump file
C
Cccc      DROPLET_IF: IF (DROPLET_FILE) THEN
      DROPLET_IF: IF ( (DROPLET_FILE .AND. .NOT.EVACUATION_ONLY(NM))
     .     .OR. (EVACUATION_ONLY(NM).AND.EVACUATION_GRID(NM)) ) THEN
C
      IF (NMESHES.GT.1) THEN
      WRITE(FN10,'(A,I2.2,A)') TRIM(CHID)//'_',NM,'.part'
      ELSE
      WRITE(FN10,'(A,A)') TRIM(CHID),'.part'
      ENDIF
C
      LUPF = 7000+NM
C
      APPEND_DROPLET_FILE: IF (APPEND) THEN
      OPEN(LUPF,FILE=FN10,FORM='UNFORMATTED',STATUS='OLD',
     .     POSITION='APPEND')
C
      ELSE APPEND_DROPLET_FILE
C
      IF (M%N_STRINGS+5.GT.M%N_STRINGS_MAX) CALL RE_ALLOCATE_STRINGS(NM)
      EVAC_ONLY: IF (EVACUATION_ONLY(NM)) THEN
        M%N_STRINGS = M%N_STRINGS + 1
        WRITE(M%STRING(M%N_STRINGS),'(A,I3)') 'EVAC',NM
        M%N_STRINGS = M%N_STRINGS + 1
        WRITE(M%STRING(M%N_STRINGS),'(A)') FN10  
        M%N_STRINGS = M%N_STRINGS + 1
        WRITE(M%STRING(M%N_STRINGS),'(A)') 'HUMANS'
        M%N_STRINGS = M%N_STRINGS + 1
        WRITE(M%STRING(M%N_STRINGS),'(A)') '  '
        M%N_STRINGS = M%N_STRINGS + 1
        WRITE(M%STRING(M%N_STRINGS),'(A)') '  '
      ELSE
        M%N_STRINGS = M%N_STRINGS + 1
        WRITE(M%STRING(M%N_STRINGS),'(A,I3)') 'PART',NM
        M%N_STRINGS = M%N_STRINGS + 1
        WRITE(M%STRING(M%N_STRINGS),'(A)') FN10  
        IF (IPART.EQ. 0) NN = 0
        IF (IPART.EQ.-1) NN = 5
        IF (IPART.EQ.-3) NN = 34
        IF (IPART.EQ.-4) NN = 10
        IF (IPART.EQ.-5) NN = 36
        IF (IPART.EQ.-6) NN = 39
        M%N_STRINGS = M%N_STRINGS + 1
        WRITE(M%STRING(M%N_STRINGS),'(A)') CDATA(NN)
        M%N_STRINGS = M%N_STRINGS + 1
        WRITE(M%STRING(M%N_STRINGS),'(A)') SDATA(NN)
        M%N_STRINGS = M%N_STRINGS + 1
        WRITE(M%STRING(M%N_STRINGS),'(A)') UDATA(NN)
      ENDIF EVAC_ONLY
C
      OPEN(LUPF,FILE=FN10,FORM='UNFORMATTED',STATUS='REPLACE')
C
      M => MESH(NM)
      SARX  = (M%ZF-M%ZS)/(M%XF-M%XS)
      SARY  = (M%ZF-M%ZS)/(M%YF-M%YS)
      SWPAR =  WPAR
      WRITE(LUPF) SARX,SARY,SWPAR,IPART,NPPS
      WRITE(LUPF) M%IBAR,M%JBAR,M%KBAR
      WRITE(LUPF) (M%XPLT(I),I=0,M%IBAR),
     .            (M%YPLT(J),J=0,M%JBAR),
     .            (M%ZPLT(K),K=0,M%KBAR)
      WRITE(LUPF) M%NB
      DO N=1,M%NB
      OB=>M%OBSTRUCTION(N)
      WRITE(LUPF) OB%I1+1,OB%I2,OB%J1+1,OB%J2,OB%K1+1,OB%K2,1
      ENDDO
      WRITE(LUPF) M%NV
      DO N=1,M%NV
      VT=>M%VENTS(N)
      WRITE(LUPF) VT%I1,VT%I2,VT%J1,VT%J2,VT%K1,VT%K2,2
      ENDDO
C
      IF (NSPR.GT.0) THEN
      WRITE(LUPF) NSPR
      DO N=1,NSPR
      SH => SPRINKLER_HEAD(N)
      WRITE(LUPF) REAL(SH%X,FB),REAL(SH%Y,FB),REAL(SH%Z,FB)
      ENDDO
      ELSE
      WRITE(LUPF) INT(1)
      WRITE(LUPF) -999._FB,-999._FB,-999._FB
      ENDIF
C
      ENDIF APPEND_DROPLET_FILE
      ENDIF DROPLET_IF
C
      TUSED(7,NM) = TUSED(7,NM) + SECOND() - TNOW
      END SUBROUTINE INITIALIZE_MESH_DUMPS
C
C
      SUBROUTINE WRITE_SMOKEVIEW_FILE
C
      INTEGER :: NM,NX,NY,NZ,NIN,NXL,NYL,NZL,NDV,NDVOLD,NDVDIM,N_TICKS,
     .           INDX
      INTEGER, ALLOCATABLE, DIMENSION(:) ::
     .          IDV1,IDV2,JDV1,JDV2,KDV1,KDV2
      INTEGER, ALLOCATABLE, DIMENSION(:,:) :: WALL_DUMMY
      REAL(EB) :: X1,Y1,Z1,X2,Y2,Z2,XX,YY,ZZ,PERT1(4),PERT2(4),
     .            XMIN,YMIN,ZMIN,XMAX,YMAX,ZMAX,XA,YA,ZA,
     .            TICK_LENGTH,TICK_WIDTH,X_INT,Y_INT,Z_INT
      TYPE SEGMENT_TYPE
      REAL(EB) :: X1,X2,Y1,Y2,Z1,Z2
      END TYPE SEGMENT_TYPE
      TYPE (SEGMENT_TYPE), ALLOCATABLE, TARGET, DIMENSION(:) :: SEGMENT
      TYPE (SEGMENT_TYPE), POINTER :: SEG
      INTEGER :: N_SEGMENTS_MAX
      TYPE (MESH_TYPE), POINTER :: M,MX,MY,MZ
      TYPE (TRAN_TYPE), POINTER :: T
      REAL(EB), ALLOCATABLE, DIMENSION(:) :: XLEVEL,YLEVEL,ZLEVEL
      INTEGER, PARAMETER :: ONE_INTEGER=1
      CHARACTER(30) LABEL
      TYPE (SPRINKLER_HEAD_TYPE), POINTER :: SH
      TYPE (HEAT_DETECTOR_TYPE), POINTER :: HD
      TYPE (SMOKE_DETECTOR_TYPE),POINTER :: SD
C
C Open up the Smokeview ".smv" file
C
      IF (APPEND) THEN
      OPEN(LU4,FILE=TRIM(CHID)//'.smv',FORM='FORMATTED',
     .     STATUS='OLD',POSITION='APPEND')
      RETURN
      ENDIF
C
      OPEN(LU4,FILE=TRIM(CHID)//'.smv',FORM='FORMATTED',
     .     STATUS='REPLACE')
C
C Write out TITLE
C
      WRITE(LU4,'(A)') 'TITLE'
      WRITE(LU4,'(A)')  TITLE
C
C Record the version and endian-ness in .smv file
C
      WRITE(LU4,'(A)') 'VERSION'
      WRITE(LU4,'(F4.2)') VERSION
C
      OPEN(LU2,FILE=TRIM(CHID)//'.end',FORM='UNFORMATTED',
     .                               STATUS='REPLACE')
      WRITE(LU2) ONE_INTEGER
      CLOSE(LU2)
      WRITE(LU4,'(A)') 'ENDF'
      WRITE(LU4,'(A)') TRIM(CHID)//'.end'
C
      IF (INPUT_FILE.EQ.'null') INPUT_FILE = TRIM(CHID)//'.data'
      WRITE(LU4,'(A)') 'INPF'
      WRITE(LU4,'(A)') TRIM(INPUT_FILE)
C
      IF (DATABASE.NE.'null') THEN
      WRITE(LU4,'(A)') 'DATABASE'
      WRITE(LU4,'(2X,A)')  DATABASE
      ENDIF
C
      IF (TEXTURE_DIRECTORY.NE.'null') THEN
      WRITE(LU4,'(A)') 'CADTEXTUREPATH'
      WRITE(LU4,'(2X,A)')  TEXTURE_DIRECTORY
      ENDIF
C
      WRITE(LU4,'(A)') 'NMESHES'
      WRITE(LU4,'(I3)') NMESHES
C
      WRITE(LU4,'(A)') 'VIEWTIMES'
      WRITE(LU4,'(2F10.2,I6)') 0.0,MAX(0.01_EB,TWFIN),MAX(2,NFRAMES)
C
      IF (RENDER_FILE.NE.'null') THEN
      WRITE(LU4,'(A)') 'CADGEOM'
      WRITE(LU4,'(A)') TRIM(RENDER_FILE)
      ENDIF
C
      WRITE(LU4,'(A)') 'SURFDEF'
      WRITE(LU4,'(A,A)') ' ',SURFNAME(IBCDEF)
C
      DO N=0,NBT
      WRITE(LU4,'(A)') 'SURFACE'
      WRITE(LU4,'(A,A)') ' ',SURFNAME(N)
      WRITE(LU4,'(3F8.1)') TMP_I(N)-TMPM,E_WALL_S(N)
      WRITE(LU4,'(I2,6F8.2)') SURF_TYPE(N),
     .     TEX_WIDTH(N),TEX_HEIGHT(N),
     .     SURF_RGB(N,1),SURF_RGB(N,2),SURF_RGB(N,3),SURF_RGB(N,4)
      WRITE(LU4,'(A,A)') ' ',TEX_MAP(N)
      ENDDO
C
C Tick Marks
C
      XMIN = 10000.
      XMAX =-10000.
      YMIN = 10000.
      YMAX =-10000.
      ZMIN = 10000.
      ZMAX =-10000.
      DO NM=1,NMESHES
      M => MESH(NM)
      XMIN = MIN(M%XS,XMIN) ; XMAX = MAX(M%XF,XMAX)
      YMIN = MIN(M%YS,YMIN) ; YMAX = MAX(M%YF,YMAX)
      ZMIN = MIN(M%ZS,ZMIN) ; ZMAX = MAX(M%ZF,ZMAX)
      ENDDO
C
      TICK_LENGTH = (XMAX-XMIN)/50.
      TICK_WIDTH  = 2.
      N_TICKS     = 5
      X_INT       = (XMAX-XMIN)/(N_TICKS-1.)
      Y_INT       = (YMAX-YMIN)/(N_TICKS-1.)
      Z_INT       = (ZMAX-ZMIN)/(N_TICKS-1.)
C
      WRITE(LU4,'(A)') 'TICKS'  ! x-axis
      WRITE(LU4,'(6F10.2,I3)') XMIN,YMIN,ZMIN,XMAX,YMIN,ZMIN,N_TICKS
      WRITE(LU4,'(6F10.3)') TICK_LENGTH,-2.,-1.,-1.,-1.,TICK_WIDTH
      WRITE(LU4,'(A)') 'TICKS'
      WRITE(LU4,'(6F10.2,I3)') XMIN,YMIN,ZMIN,XMIN,YMIN,ZMIN,1
      WRITE(LU4,'(6F10.3)') XMAX-XMIN,1.,-1.,-1.,-1.,TICK_WIDTH
C
      DO I=0,N_TICKS-1
      WRITE(LU4,'(A)') 'LABEL'
      WRITE(LU4,'(8F10.3)') XMIN+I*X_INT,YMIN-2.*TICK_LENGTH,ZMIN,
     .                      -1.,-1.,-1.,0.,TWFIN
      CALL TRIM_LABEL(XMIN+I*X_INT,LABEL)
      WRITE(LU4,'(A)') TRIM(LABEL)
      ENDDO
C
      WRITE(LU4,'(A)') 'TICKS'  ! y-axis
      WRITE(LU4,'(6F10.2,I3)') XMIN,YMIN,ZMIN,XMIN,YMAX,ZMIN,N_TICKS
      WRITE(LU4,'(6F10.3)') TICK_LENGTH,-1.,-1.,-1.,-1.,TICK_WIDTH
      WRITE(LU4,'(A)') 'TICKS'
      WRITE(LU4,'(6F10.2,I3)') XMIN,YMIN,ZMIN,XMIN,YMIN,ZMIN,1
      WRITE(LU4,'(6F10.3)') YMAX-YMIN,2.,-1.,-1.,-1.,TICK_WIDTH
C
      DO I=0,N_TICKS-1
      WRITE(LU4,'(A)') 'LABEL'
      WRITE(LU4,'(8F10.3)') XMIN-2.*TICK_LENGTH,YMIN+I*Y_INT,ZMIN,
     .                      -1.,-1.,-1.,0.,TWFIN
      CALL TRIM_LABEL(YMIN+I*Y_INT,LABEL)
      WRITE(LU4,'(A)') TRIM(LABEL)
      ENDDO
C
      WRITE(LU4,'(A)') 'TICKS'  ! z-axis
      WRITE(LU4,'(6F10.2,I3)') XMIN,YMIN,ZMIN,XMIN,YMIN,ZMAX,N_TICKS
      WRITE(LU4,'(6F10.3)') TICK_LENGTH,-1.,-1.,-1.,-1.,TICK_WIDTH
      WRITE(LU4,'(A)') 'TICKS'
      WRITE(LU4,'(6F10.2,I3)') XMIN,YMIN,ZMIN,XMIN,YMIN,ZMIN,1
      WRITE(LU4,'(6F10.3)') ZMAX-ZMIN,3.,-1.,-1.,-1.,TICK_WIDTH
C
      DO I=0,N_TICKS-1
      WRITE(LU4,'(A)') 'LABEL'
      WRITE(LU4,'(8F10.3)') XMIN-2.*TICK_LENGTH,YMIN,ZMIN+I*Z_INT,
     .                      -1.,-1.,-1.,0.,TWFIN
      CALL TRIM_LABEL(ZMIN+I*Z_INT,LABEL)
      WRITE(LU4,'(A)') TRIM(LABEL)
      ENDDO
C
C Figure out the outline for multiblock cases
C
      PERT1(1) = 0.001 ; PERT2(1) = 0.001
      PERT1(2) = -.001 ; PERT2(2) = 0.001
      PERT1(3) = -.001 ; PERT2(3) = -.001
      PERT1(4) = 0.001 ; PERT2(4) = -.001
C
      ALLOCATE(XLEVEL(0:2*NMESHES)) ; XLEVEL = -100000.
      ALLOCATE(YLEVEL(0:2*NMESHES)) ; YLEVEL = -100000.
      ALLOCATE(ZLEVEL(0:2*NMESHES)) ; ZLEVEL = -100000.
C
      NXL = 0 ; NYL = 0 ; NZL = 0
      DO NM=1,2*NMESHES
      XMIN = 100000. ; YMIN = 100000. ; ZMIN = 100000.
      DO N=1,2*NMESHES
      M => MESH(INT((N+1)/2))
      IF (MOD(N,2).NE.0) XX = M%XS
      IF (MOD(N,2).EQ.0) XX = M%XF
      IF (MOD(N,2).NE.0) YY = M%YS
      IF (MOD(N,2).EQ.0) YY = M%YF
      IF (MOD(N,2).NE.0) ZZ = M%ZS
      IF (MOD(N,2).EQ.0) ZZ = M%ZF
      IF (XX.GT.XLEVEL(NXL)) XMIN = MIN(XX,XMIN)
      IF (YY.GT.YLEVEL(NYL)) YMIN = MIN(YY,YMIN)
      IF (ZZ.GT.ZLEVEL(NZL)) ZMIN = MIN(ZZ,ZMIN)
      ENDDO
      IF (XMIN.GT.XLEVEL(NXL)) THEN
         NXL = NXL + 1
         XLEVEL(NXL) = XMIN
         ENDIF
      IF (YMIN.GT.YLEVEL(NYL)) THEN
         NYL = NYL + 1
         YLEVEL(NYL) = YMIN
         ENDIF
      IF (ZMIN.GT.ZLEVEL(NZL)) THEN
         NZL = NZL + 1
         ZLEVEL(NZL) = ZMIN
         ENDIF
      ENDDO
C
      N_SEGMENTS_MAX = 100
      ALLOCATE(SEGMENT(1:N_SEGMENTS_MAX),STAT=IZERO)
C
      N = 0
C
      XLOOP1: DO NX=1,2*NMESHES
      MX => MESH(INT((NX+1)/2))
      IF (MOD(NX,2).NE.0) XX = MX%XS
      IF (MOD(NX,2).EQ.0) XX = MX%XF
      YLOOP1: DO NY=1,2*NMESHES
      MY => MESH(INT((NY+1)/2))
      IF (MOD(NY,2).NE.0) YY = MY%YS
      IF (MOD(NY,2).EQ.0) YY = MY%YF
      IF ((XX.LT.MY%XS .OR. XX.GT.MY%XF) .OR.
     .    (YY.LT.MX%YS .OR. YY.GT.MX%YF)) CYCLE YLOOP1
      Z1 = MAX(MX%ZS,MY%ZS)
      Z2 = MIN(MX%ZF,MY%ZF)
      IF (Z1.GE.Z2) CYCLE YLOOP1
      ZLOOP1: DO NZ=1,NZL
      ZZ = ZLEVEL(NZ)
      IF (ZZ.LE.Z1) CYCLE ZLOOP1
      IF (ZZ.GT.Z2) CYCLE YLOOP1
      ZA = (Z1+ZZ)/2.
      NIN = 0
      DO I=1,4
      IF (INTERIOR(XX+PERT1(I),YY+PERT2(I),ZA)) NIN = NIN+1
      ENDDO
      IF (NIN.NE.1 .AND. NIN.NE.3) THEN
         Z1 = ZZ
         CYCLE ZLOOP1
         ENDIF
      DO I=1,N
      SEG=>SEGMENT(I)
      IF (XX.EQ.SEG%X1 .AND. XX.EQ.SEG%X2 .AND.
     .    YY.EQ.SEG%Y1 .AND. YY.EQ.SEG%Y2 .AND.
     .    Z1.EQ.SEG%Z1 .AND. ZZ.EQ.SEG%Z2) THEN
         Z1 = ZZ
         CYCLE ZLOOP1
         ENDIF
      ENDDO
      IF (N+1.GT.N_SEGMENTS_MAX) CALL RE_ALLOCATE_SEGMENTS
      N = N+1
      SEG=>SEGMENT(N)
      SEG%X1 = XX ; SEG%X2 = XX
      SEG%Y1 = YY ; SEG%Y2 = YY
      SEG%Z1 = Z1 ; SEG%Z2 = ZZ
      Z1 = ZZ
      ENDDO ZLOOP1
      ENDDO YLOOP1
      ENDDO XLOOP1
C
      XLOOP2: DO NX=1,2*NMESHES
      MX => MESH(INT((NX+1)/2))
      IF (MOD(NX,2).NE.0) XX = MX%XS
      IF (MOD(NX,2).EQ.0) XX = MX%XF
      ZLOOP2: DO NZ=1,2*NMESHES
      MZ => MESH(INT((NZ+1)/2))
      IF (MOD(NZ,2).NE.0) ZZ = MZ%ZS
      IF (MOD(NZ,2).EQ.0) ZZ = MZ%ZF
      IF ((XX.LT.MZ%XS .OR. XX.GT.MZ%XF) .OR.
     .    (ZZ.LT.MX%ZS .OR. ZZ.GT.MX%ZF)) CYCLE ZLOOP2
      Y1 = MAX(MX%YS,MZ%YS)
      Y2 = MIN(MX%YF,MZ%YF)
      IF (Y1.GE.Y2) CYCLE ZLOOP2
      YLOOP2: DO NY=1,NYL
      YY = YLEVEL(NY)
      IF (YY.LE.Y1) CYCLE YLOOP2
      IF (YY.GT.Y2) CYCLE ZLOOP2
      YA = (Y1+YY)/2.
      NIN = 0
      DO I=1,4
      IF (INTERIOR(XX+PERT1(I),YA,ZZ+PERT2(I))) NIN = NIN+1
      ENDDO
      IF (NIN.NE.1 .AND. NIN.NE.3) THEN
         Y1 = YY
         CYCLE YLOOP2
         ENDIF
      DO I=1,N
      SEG=>SEGMENT(I)
      IF (XX.EQ.SEG%X1 .AND. XX.EQ.SEG%X2 .AND.
     .    Y1.EQ.SEG%Y1 .AND. YY.EQ.SEG%Y2 .AND.
     .    ZZ.EQ.SEG%Z1 .AND. ZZ.EQ.SEG%Z2) THEN
         Y1 = YY
         CYCLE YLOOP2
         ENDIF
      ENDDO
      IF (N+1.GT.N_SEGMENTS_MAX) CALL RE_ALLOCATE_SEGMENTS
      N = N+1
      SEG=>SEGMENT(N)
      SEG%X1 = XX ; SEG%X2 = XX
      SEG%Y1 = Y1 ; SEG%Y2 = YY
      SEG%Z1 = ZZ ; SEG%Z2 = ZZ
      Y1 = YY
      ENDDO YLOOP2
      ENDDO ZLOOP2
      ENDDO XLOOP2
C
      ZLOOP3: DO NZ=1,2*NMESHES
      MZ => MESH(INT((NZ+1)/2))
      IF (MOD(NZ,2).NE.0) ZZ = MZ%ZS
      IF (MOD(NZ,2).EQ.0) ZZ = MZ%ZF
      YLOOP3: DO NY=1,2*NMESHES
      MY => MESH(INT((NY+1)/2))
      IF (MOD(NY,2).NE.0) YY = MY%YS
      IF (MOD(NY,2).EQ.0) YY = MY%YF
      IF ((ZZ.LT.MY%ZS .OR. ZZ.GT.MY%ZF) .OR.
     .    (YY.LT.MZ%YS .OR. YY.GT.MZ%YF)) CYCLE YLOOP3
      X1 = MAX(MZ%XS,MY%XS)
      X2 = MIN(MZ%XF,MY%XF)
      IF (X1.GE.X2) CYCLE YLOOP3
      XLOOP3: DO NX=1,NXL
      XX = XLEVEL(NX)
      IF (XX.LE.X1) CYCLE XLOOP3
      IF (XX.GT.X2) CYCLE YLOOP3
      XA = (X1+XX)/2.
      NIN = 0
      DO I=1,4
      IF (INTERIOR(XA,YY+PERT1(I),ZZ+PERT2(I))) NIN = NIN+1
      ENDDO
      IF (NIN.NE.1 .AND. NIN.NE.3) THEN
         X1 = XX
         CYCLE XLOOP3
         ENDIF
      DO I=1,N
      SEG=>SEGMENT(I)
      IF (X1.EQ.SEG%X1 .AND. XX.EQ.SEG%X2 .AND.
     .    YY.EQ.SEG%Y1 .AND. YY.EQ.SEG%Y2 .AND.
     .    ZZ.EQ.SEG%Z1 .AND. ZZ.EQ.SEG%Z2) THEN
         X1 = XX
         CYCLE XLOOP3
         ENDIF
      ENDDO
      IF (N+1.GT.N_SEGMENTS_MAX) CALL RE_ALLOCATE_SEGMENTS
      N = N+1
      SEG=>SEGMENT(N)
      SEG%X1 = X1 ; SEG%X2 = XX
      SEG%Y1 = YY ; SEG%Y2 = YY
      SEG%Z1 = ZZ ; SEG%Z2 = ZZ
      X1 = XX
      ENDDO XLOOP3
      ENDDO YLOOP3
      ENDDO ZLOOP3
C
      WRITE(LU4,'(A)') 'OUTLINE'
      WRITE(LU4,'(I4)') N
      DO I=1,N
      SEG=>SEGMENT(I)
      WRITE(LU4,'(6F10.4)') SEG%X1,SEG%Y1,SEG%Z1,SEG%X2,SEG%Y2,SEG%Z2
      ENDDO
C
      DEALLOCATE(SEGMENT)
C
      WRITE(LU4,'(A)') 'TOFFSET'
      WRITE(LU4,'(3F8.3)') (TEX_ORI(I),I=1,3)
C
C Write grid info for each block
C
      MESH_LOOP: DO NM=1,NMESHES
      M => MESH(NM)
      T => TRANS(NM)
C
      WRITE(LU4,'(A)') 'OFFSET'
      WRITE(LU4,'(3F8.3)') 0.,0.,0.
      WRITE(LU4,'(A,3X,A)') 'GRID',TRIM(MESH_NAME(NM))
      WRITE(LU4,'(3I5)') M%IBAR,M%JBAR,M%KBAR
      WRITE(LU4,'(A)') 'PDIM'
      WRITE(LU4,'(6F12.5)') M%XS,M%XF,M%YS,M%YF,M%ZS,M%ZF
      WRITE(LU4,'(A)') 'TRNX'
      WRITE(LU4,'(I5)') T%NOC(1)
      DO N=1,T%NOC(1)
      WRITE(LU4,'(I5,2F12.5)')
     .            T%IDERIVSTORE(N,1),T%CCSTORE(N,1),T%PCSTORE(N,1)
      ENDDO
      DO I=0,M%IBAR
      WRITE(LU4,'(I5,F12.5)') I,M%X(I)
      ENDDO
      WRITE(LU4,'(A)') 'TRNY'
      WRITE(LU4,'(I5)') T%NOC(2)
      DO N=1,T%NOC(2)
      WRITE(LU4,'(I5,2F12.5)')
     .            T%IDERIVSTORE(N,2),T%CCSTORE(N,2),T%PCSTORE(N,2)
      ENDDO
      DO J=0,M%JBAR
      WRITE(LU4,'(I5,F12.5)') J,M%Y(J)
      ENDDO
      WRITE(LU4,'(A)') 'TRNZ'
      WRITE(LU4,'(I5)') T%NOC(3)
      DO N=1,T%NOC(3)
      WRITE(LU4,'(I5,2F12.5)')
     .            T%IDERIVSTORE(N,3),T%CCSTORE(N,3),T%PCSTORE(N,3)
      ENDDO
      DO K=0,M%KBAR
      WRITE(LU4,'(I5,F12.5)') K,M%Z(K)
      ENDDO
C
C Write obstacle info to .smv file
C
      WRITE(LU4,'(A)') 'OBST'
      WRITE(LU4,*) M%NB
      DO N=1,M%NB
      OB=>M%OBSTRUCTION(N)
      IF (OB%TEXTURE(1).EQ.-999.) THEN
      WRITE(LU4,'(6F12.5,I7,6I4)') OB%X1,OB%X2,OB%Y1,OB%Y2,OB%Z1,OB%Z2,
     .   OB%ORDINAL,
     .   OB%IBC(-1),OB%IBC(1),OB%IBC(-2),OB%IBC(2),OB%IBC(-3),OB%IBC(3)
      ELSE
      WRITE(LU4,'(6F12.5,I7,6I4,3F8.2)') 
     .   OB%X1,OB%X2,OB%Y1,OB%Y2,OB%Z1,OB%Z2,OB%ORDINAL,
     .   OB%IBC(-1),OB%IBC(1),OB%IBC(-2),OB%IBC(2),OB%IBC(-3),OB%IBC(3),
     .   OB%TEXTURE(1),OB%TEXTURE(2),OB%TEXTURE(3)
      ENDIF
      ENDDO
      DO N=1,M%NB
      OB=>M%OBSTRUCTION(N)
      IF (OB%BCI.NE.-3) THEN
         WRITE(LU4,'(8I5)')
     .      OB%I1,OB%I2,OB%J1,OB%J2,OB%K1,OB%K2,OB%BCI,OB%BTI
      ELSE
         WRITE(LU4,'(8I5,4F6.2)')
     .      OB%I1,OB%I2,OB%J1,OB%J2,OB%K1,OB%K2,OB%BCI,OB%BTI,
     .      OB%RGB(1),OB%RGB(2),OB%RGB(3),OB%RGB(4)
      ENDIF
      ENDDO
C
      DO N=1,M%NB
      OB=>M%OBSTRUCTION(N)
      IF (OB%HIDDEN) THEN
         WRITE(LU4,'(A,I3)') 'HIDE_OBST',NM
         WRITE(LU4,'(I6,F8.2)') N,0.
         ENDIF
      ENDDO
C
C Write out vent info to check file
C
      NDV = 0
      NDVDIM = 1000
      ALLOCATE(IDV1(NDVDIM))
      ALLOCATE(IDV2(NDVDIM))
      ALLOCATE(JDV1(NDVDIM))
      ALLOCATE(JDV2(NDVDIM))
      ALLOCATE(KDV1(NDVDIM))
      ALLOCATE(KDV2(NDVDIM))
C
      ALLOCATE(WALL_DUMMY(M%JBAR,M%KBAR))
C
      WALL_DUMMY = 0
      DO N=1,M%NV
      VT=>M%VENTS(N)
      IF (VT%I1.EQ.0 .AND. VT%I2.EQ.0)
     .WALL_DUMMY(VT%J1+1:VT%J2,VT%K1+1:VT%K2) = -1
      ENDDO
      DO K=1,M%KBAR
      DO J=1,M%JBAR
      XX = M%X(0) - 0.001*M%DX(0)
      YY = 0.5*(M%Y(J)+M%Y(J-1))
      ZZ = 0.5*(M%Z(K)+M%Z(K-1))
      IF (INTERIOR(XX,YY,ZZ)) WALL_DUMMY(J,K) = -1
      ENDDO
      ENDDO
      NDVOLD = NDV
      CALL DUMMY_VENTS(WALL_DUMMY,M%JBAR,M%KBAR,NDVDIM,
     .                 NDV,JDV1,JDV2,KDV1,KDV2)
      IDV1(NDVOLD+1:NDV) = 0
      IDV2(NDVOLD+1:NDV) = 0
C
      WALL_DUMMY = 0
      DO N=1,M%NV
      VT=>M%VENTS(N)
      IF (VT%I1.EQ.M%IBAR .AND. VT%I2.EQ.M%IBAR)
     .WALL_DUMMY(VT%J1+1:VT%J2,VT%K1+1:VT%K2) = -1
      ENDDO
      DO K=1,M%KBAR
      DO J=1,M%JBAR
      XX = M%X(M%IBAR) + 0.001*M%DX(M%IBAR)
      YY = 0.5*(M%Y(J)+M%Y(J-1))
      ZZ = 0.5*(M%Z(K)+M%Z(K-1))
      IF (INTERIOR(XX,YY,ZZ)) WALL_DUMMY(J,K) = -1
      ENDDO
      ENDDO
      NDVOLD = NDV
      CALL DUMMY_VENTS(WALL_DUMMY,M%JBAR,M%KBAR,NDVDIM,
     .                 NDV,JDV1,JDV2,KDV1,KDV2)
      IDV1(NDVOLD+1:NDV) = M%IBAR
      IDV2(NDVOLD+1:NDV) = M%IBAR
C
      DEALLOCATE(WALL_DUMMY)
C
      ALLOCATE(WALL_DUMMY(M%IBAR,M%KBAR))
C
      WALL_DUMMY = 0
      DO N=1,M%NV
      VT=>M%VENTS(N)
      IF (VT%J1.EQ.0 .AND. VT%J2.EQ.0)
     .WALL_DUMMY(VT%I1+1:VT%I2,VT%K1+1:VT%K2) = -1
      ENDDO
      DO K=1,M%KBAR
      DO I=1,M%IBAR
      YY = M%Y(0) - 0.001*M%DY(0)
      XX = 0.5*(M%X(I)+M%X(I-1))
      ZZ = 0.5*(M%Z(K)+M%Z(K-1))
      IF (INTERIOR(XX,YY,ZZ)) WALL_DUMMY(I,K) = -1
      ENDDO
      ENDDO
      NDVOLD = NDV
      CALL DUMMY_VENTS(WALL_DUMMY,M%IBAR,M%KBAR,NDVDIM,
     .                 NDV,IDV1,IDV2,KDV1,KDV2)
      JDV1(NDVOLD+1:NDV) = 0
      JDV2(NDVOLD+1:NDV) = 0
C
      WALL_DUMMY = 0
      DO N=1,M%NV
      VT=>M%VENTS(N)
      IF (VT%J1.EQ.M%JBAR .AND. VT%J2.EQ.M%JBAR)
     .WALL_DUMMY(VT%I1+1:VT%I2,VT%K1+1:VT%K2) = -1
      ENDDO
      DO K=1,M%KBAR
      DO I=1,M%IBAR
      YY = M%Y(M%JBAR) + 0.001*M%DY(M%JBAR)
      XX = 0.5*(M%X(I)+M%X(I-1))
      ZZ = 0.5*(M%Z(K)+M%Z(K-1))
      IF (INTERIOR(XX,YY,ZZ)) WALL_DUMMY(I,K) = -1
      ENDDO
      ENDDO
      NDVOLD = NDV
      CALL DUMMY_VENTS(WALL_DUMMY,M%IBAR,M%KBAR,NDVDIM,
     .                 NDV,IDV1,IDV2,KDV1,KDV2)
      JDV1(NDVOLD+1:NDV) = M%JBAR
      JDV2(NDVOLD+1:NDV) = M%JBAR
C
      DEALLOCATE(WALL_DUMMY)
C
      ALLOCATE(WALL_DUMMY(M%IBAR,M%JBAR))
C
      WALL_DUMMY = 0
      DO N=1,M%NV
      VT=>M%VENTS(N)
      IF (VT%K1.EQ.0 .AND. VT%K2.EQ.0)
     .WALL_DUMMY(VT%I1+1:VT%I2,VT%J1+1:VT%J2) = -1
      ENDDO
      DO J=1,M%JBAR
      DO I=1,M%IBAR
      ZZ = M%Z(0) - 0.001*M%DZ(0)
      XX = 0.5*(M%X(I)+M%X(I-1))
      YY = 0.5*(M%Y(J)+M%Y(J-1))
      IF (INTERIOR(XX,YY,ZZ)) WALL_DUMMY(I,J) = -1
      ENDDO
      ENDDO
      NDVOLD = NDV
      CALL DUMMY_VENTS(WALL_DUMMY,M%IBAR,M%JBAR,NDVDIM,
     .                 NDV,IDV1,IDV2,JDV1,JDV2)
      KDV1(NDVOLD+1:NDV) = 0
      KDV2(NDVOLD+1:NDV) = 0
C
      WALL_DUMMY = 0
      DO N=1,M%NV
      VT=>M%VENTS(N)
      IF (VT%K1.EQ.M%KBAR .AND. VT%K2.EQ.M%KBAR)
     .WALL_DUMMY(VT%I1+1:VT%I2,VT%J1+1:VT%J2) = -1
      ENDDO
      DO J=1,M%JBAR
      DO I=1,M%IBAR
      ZZ = M%Z(M%KBAR) + 0.001*M%DZ(M%KBAR)
      XX = 0.5*(M%X(I)+M%X(I-1))
      YY = 0.5*(M%Y(J)+M%Y(J-1))
      IF (INTERIOR(XX,YY,ZZ)) WALL_DUMMY(I,J) = -1
      ENDDO
      ENDDO
      NDVOLD = NDV
      CALL DUMMY_VENTS(WALL_DUMMY,M%IBAR,M%JBAR,NDVDIM,
     .                 NDV,IDV1,IDV2,JDV1,JDV2)
      KDV1(NDVOLD+1:NDV) = M%KBAR
      KDV2(NDVOLD+1:NDV) = M%KBAR
C
      DEALLOCATE(WALL_DUMMY)
C
      WRITE(LU4,'(A)') 'VENT'
      WRITE(LU4,'(2I5)') M%NV+NDV,NDV
C
      DO N=1,M%NV
      VT=>M%VENTS(N)
      IF (VT%TEXTURE(1).EQ.-999.) THEN
      WRITE(LU4,'(6F12.5,I6,I4)') 
     .  VT%X1,VT%X2,VT%Y1,VT%Y2,VT%Z1,VT%Z2,VT%ORDINAL,VT%IBC
      ELSE
      WRITE(LU4,'(6F12.5,I6,I4,3F8.2)')
     .  VT%X1,VT%X2,VT%Y1,VT%Y2,VT%Z1,VT%Z2,VT%ORDINAL,VT%IBC,
     .  VT%TEXTURE(1),VT%TEXTURE(2),VT%TEXTURE(3)
      ENDIF
      ENDDO
      DO N=1,NDV
      WRITE(LU4,'(6F12.5,I6,I4)') M%X(IDV1(N)),M%X(IDV2(N)),
     .                            M%Y(JDV1(N)),M%Y(JDV2(N)),
     .                            M%Z(KDV1(N)),M%Z(KDV2(N)),
     .                            M%NV+N,0
      ENDDO
C
      DO N=1,M%NV
      VT=>M%VENTS(N)
      IF (VT%INDEX.EQ.2) INDX = -VT%VCI
      IF (VT%INDEX.NE.2) INDX =  VT%VCI
      IF (VT%RGB(1).LT.0.) THEN
      WRITE(LU4,'(8I5)') 
     .      VT%I1,VT%I2,VT%J1,VT%J2,VT%K1,VT%K2,INDX,VT%VTI
      ELSE
      WRITE(LU4,'(8I5,4F6.2)')
     .      VT%I1,VT%I2,VT%J1,VT%J2,VT%K1,VT%K2,INDX,VT%VTI,
     .      VT%RGB(1),VT%RGB(2),VT%RGB(3),VT%RGB(4)
      ENDIF
      ENDDO
      DO N=1,NDV
      INDX = 99
      WRITE(LU4,'(8I5)') IDV1(N),IDV2(N),JDV1(N),
     .                   JDV2(N),KDV1(N),KDV2(N),INDX,0
      ENDDO
C
      DO N=1,M%NV
      VT=>M%VENTS(N)
      IF (VT%CLOSED) THEN
         WRITE(LU4,'(A,I3)') 'CLOSE_VENT',NM
         WRITE(LU4,'(I4,F8.2)') N,0.
         ENDIF
      ENDDO
C
      DEALLOCATE(IDV1)
      DEALLOCATE(IDV2)
      DEALLOCATE(JDV1)
      DEALLOCATE(JDV2)
      DEALLOCATE(KDV1)
      DEALLOCATE(KDV2)
C
      ENDDO MESH_LOOP
C
C Write out threshold value for HRRPUV
C
      WRITE(LU4,'(A)') 'HRRPUVCUT'
      WRITE(LU4,'(I5)') NMESHES
      DO NM=1,NMESHES
      WRITE(LU4,'(F8.1)') HRRPUA_SHEET/(7.*MESH(NM)%DXMIN)
      ENDDO
C
C Write out RAMP info to .smv file
C
      WRITE(LU4,'(A)') 'RAMP'
      WRITE(LU4,'(I5)') NRAMP
      DO N=1,NRAMP
      WRITE(LU4,'(A,A)')  'RAMP: ',RAMPID(N)
      WRITE(LU4,'(I5)') NTT(N)
      DO I=1,NTT(N)
      IF (N.NE.IRAMPG) WRITE(LU4,'(6F12.5)') TT(I,N),FF(I,N)
      IF (N.EQ.IRAMPG) WRITE(LU4,'(6F12.5)') TT(I,N),FF3(I,:)
      ENDDO
      ENDDO
C
      IF (NRAMP.GT.0) THEN
      DEALLOCATE(NTT)
      DEALLOCATE(TT)
      DEALLOCATE(FF)
      DEALLOCATE(FF3)
      ENDIF
C
C Write out SPRK info to .smv file
C
      WRITE(LU4,'(A)') 'SPRK'
      WRITE(LU4,'(I5)') NSPR
      DO N=1,NSPR
      SH => SPRINKLER_HEAD(N)
      WRITE(LU4,'(3F12.5)') SH%X,SH%Y,SH%Z
      ENDDO
C
C Write out HEAT info to .smv file
C
      WRITE(LU4,'(A)') 'HEAT'
      WRITE(LU4,'(I5)') NHD + NSD
      DO N=1,NHD+NSD
      IF (N.LE.NHD) THEN
      HD => HEAT_DETECTOR(N)
      WRITE(LU4,'(3F12.5)') HD%X,HD%Y,HD%Z
      ELSE
      SD => SMOKE_DETECTOR(N-NHD)
      WRITE(LU4,'(3F12.5)') SD%X,SD%Y,SD%Z
      ENDIF
      ENDDO
C
C Write out SMOKE info to .smv file
C
c     WRITE(LU4,'(A)') 'SMOKE'
c     WRITE(LU4,'(I5)') NSD
c     DO N=1,NSD
c     SD => SMOKE_DETECTOR(N)
c     WRITE(LU4,'(3F12.5)') SD%X,SD%Y,SD%Z
c     ENDDO
C
C Write out THCP info to .smv file
C
      WRITE(LU4,'(A)') 'THCP'
      WRITE(LU4,'(I5)') NTC
      DO N=1,NTC
      TC=>THERMOCOUPLE(N)
      WRITE(LU4,'(3F12.5)') TC%X,TC%Y,TC%Z
      ENDDO
C
C Flush the .smv file
C
      CALL FLUSH_BUFFER(LU4)
C
C
      CONTAINS
C
      LOGICAL FUNCTION INTERIOR(XX,YY,ZZ)
C
      INTEGER NM
      REAL(EB), INTENT(IN) :: XX,YY,ZZ
C
      INTERIOR = .FALSE.
C
      DO NM=1,NMESHES
      IF (XX.GT.MESH(NM)%XS .AND. XX.LT.MESH(NM)%XF .AND.
     .    YY.GT.MESH(NM)%YS .AND. YY.LT.MESH(NM)%YF .AND.
     .    ZZ.GT.MESH(NM)%ZS .AND. ZZ.LT.MESH(NM)%ZF) INTERIOR = .TRUE.
      ENDDO
C
      END FUNCTION INTERIOR
C
C
      SUBROUTINE DUMMY_VENTS(WALL_DUMMY,N1,N2,NDVDIM,
     .                       NDV,IVV1,IVV2,JVV1,JVV2)
C
      INTEGER, INTENT(IN) :: N1,N2,NDVDIM
      INTEGER, INTENT(OUT), DIMENSION(NDVDIM) :: IVV1,IVV2,JVV1,JVV2
      INTEGER, INTENT(INOUT) :: NDV
      INTEGER I,J,II,JJ,ISTP,JSTP
      INTEGER, INTENT(INOUT), DIMENSION(N1,N2) :: WALL_DUMMY
C
      JLOOP: DO J=1,N2
      ILOOP: DO I=1,N1
C
      IF (WALL_DUMMY(I,J).NE.0) CYCLE ILOOP
C
      ISTP = N1 ; JSTP = N2
      JJLOOP: DO JJ=J+1,N2
         IF (WALL_DUMMY(I,JJ).NE.0) THEN
            JSTP = JJ-1
            EXIT JJLOOP
            ENDIF
      ENDDO JJLOOP
C
      IILOOP: DO II=I+1,N1
      JJLOOP2: DO JJ=J,JSTP
      IF (WALL_DUMMY(II,JJ).NE.0) THEN
         ISTP = II-1
         EXIT IILOOP
         ENDIF
      ENDDO JJLOOP2
      ENDDO IILOOP
C
      NDV = NDV + 1
      WALL_DUMMY(I:ISTP,J:JSTP) = NDV
      IVV1(NDV) = I-1
      IVV2(NDV) = ISTP
      JVV1(NDV) = J-1
      JVV2(NDV) = JSTP
C
      ENDDO ILOOP
      ENDDO JLOOP

      END SUBROUTINE DUMMY_VENTS
C
C
      SUBROUTINE TRIM_LABEL(T,LAB)
C
      CHARACTER(30), INTENT(OUT) :: LAB
      REAL(EB), INTENT(IN) :: T
C
      IF (T.LT.  .00   .AND. T.GE.  -.001) WRITE(LAB,'(F3.1)') T
      IF (T.LT.   .001 .AND. T.GE.    -.1) WRITE(LAB,'(F6.3)') T
      IF (T.LT.    -.1 .AND. T.GE.    -1.) WRITE(LAB,'(F5.2)') T
      IF (T.LT.    -1. .AND. T.GE.   -10.) WRITE(LAB,'(F4.1)') T
      IF (T.LT.   -10. .AND. T.GE.  -100.) WRITE(LAB,'(F5.1)') T
      IF (T.LT.  -100. .AND. T.GE. -1000.) WRITE(LAB,'(F5.0)') T
      IF (T.LT. -1000. .AND. T.GE.-10000.) WRITE(LAB,'(F6.0)') T
      IF (T.LT.-10000.                   ) WRITE(LAB,'(F7.0)') T
C
      IF (T.GE.  .00  .AND. T.LT.  .001) WRITE(LAB,'(F3.1)') T
      IF (T.GE.  .001 .AND. T.LT.    .1) WRITE(LAB,'(F5.3)') T
      IF (T.GE.    .1 .AND. T.LT.    1.) WRITE(LAB,'(F4.2)') T
      IF (T.GE.    1. .AND. T.LT.   10.) WRITE(LAB,'(F3.1)') T
      IF (T.GE.   10. .AND. T.LT.  100.) WRITE(LAB,'(F4.1)') T
      IF (T.GE.  100. .AND. T.LT. 1000.) WRITE(LAB,'(F4.0)') T
      IF (T.GE. 1000. .AND. T.LT.10000.) WRITE(LAB,'(F5.0)') T
      IF (T.GE.10000.                  ) WRITE(LAB,'(F6.0)') T
C
      END SUBROUTINE TRIM_LABEL
C
C
      SUBROUTINE RE_ALLOCATE_SEGMENTS
C
      TYPE(SEGMENT_TYPE), ALLOCATABLE, DIMENSION(:) :: DUMMY_SEGMENT
      INTEGER IZERO
C
      ALLOCATE(DUMMY_SEGMENT(N_SEGMENTS_MAX),STAT=IZERO)
      DUMMY_SEGMENT(1:N_SEGMENTS_MAX) = SEGMENT(1:N_SEGMENTS_MAX)
C
      DEALLOCATE(SEGMENT)
      ALLOCATE(SEGMENT(N_SEGMENTS_MAX+100),STAT=IZERO)
      SEGMENT(1:N_SEGMENTS_MAX) = DUMMY_SEGMENT(1:N_SEGMENTS_MAX)
      N_SEGMENTS_MAX = N_SEGMENTS_MAX + 100
C
      DEALLOCATE(DUMMY_SEGMENT)
C
      END SUBROUTINE RE_ALLOCATE_SEGMENTS
C
C
      END SUBROUTINE WRITE_SMOKEVIEW_FILE
C
C
      SUBROUTINE INITIALIZE_DIAGNOSTIC_FILE
C
      INTEGER NM
C
      TYPE (MESH_TYPE), POINTER :: M
      TYPE (SPRINKLER_TYPE), POINTER :: S
      TYPE (SPRINKLER_HEAD_TYPE), POINTER :: SH
      TYPE (HEAT_DETECTOR_TYPE), POINTER :: HD
      TYPE (SMOKE_DETECTOR_TYPE),POINTER :: SD
C
C Write out preliminary stuff to error file (unit 0)
C
      WRITE(LU0,'(/A)')       ' NIST Fire Dynamics Simulator'
      WRITE(LU0,'(A,A)')      ' Compilation Date: ',COMPILE_DATE
      WRITE(LU0,'(A,F4.2/)')  ' Version Number  : ',VERSION
      WRITE(LU0,'(A,A/)')     ' Job TITLE    : ',TITLE
      WRITE(LU0,'(A,A/)')     ' Job ID string: ',CHID
C
C Write out the input parameters to output file (unit 6)
C
      WRITE(LU6,'(/A)')       ' NIST Fire Dynamics Simulator'
      WRITE(LU6,'(A,A)')      ' Compilation Date: ',COMPILE_DATE
      WRITE(LU6,'(A,F4.2/)')  ' Version Number  : ',VERSION
      WRITE(LU6,'(A,A/)')     ' Job TITLE    : ',TITLE
      WRITE(LU6,'(A,A/)')     ' Job ID string: ',CHID
C
      IF (APPEND) RETURN
C
      MESH_LOOP: DO NM=1,NMESHES
      M => MESH(NM)
      WRITE(LU6,'(/A,I2/)') ' Grid Dimensions, Mesh ',NM
      WRITE(LU6,'(A,I8)')     '   Cells in the X Direction      ',M%IBAR
      WRITE(LU6,'(A,I8)')     '   Cells in the Y Direction      ',M%JBAR
      WRITE(LU6,'(A,I8)')     '   Cells in the Z Direction      ',M%KBAR
      WRITE(LU6,'(//A,I2/)')' Physical Dimensions, Mesh ',NM
      WRITE(LU6,'(A,F8.3)')   '   Length (m)                    ',
     .                                             M%XF-M%XS
      WRITE(LU6,'(A,F8.3)')   '   Width  (m)                    ',
     .                                             M%YF-M%YS
      WRITE(LU6,'(A,F8.3)')   '   Height (m)                    ',
     .                                             M%ZF-M%ZS
      WRITE(LU6,'(A,F8.3)')   '   Initial Time Step (s)         ',M%DT
      ENDDO MESH_LOOP
      WRITE(LU6,'(//A/)')     ' Miscellaneous Parameters'
      WRITE(LU6,'(A,F8.3)')   '   Simulation Time (s)           ',
     .                                                         TWFIN
      IF (LES) THEN
      WRITE(LU6,'(A)')        '   LES Calculation'
      WRITE(LU6,'(A,F8.2)')   '   Smagorinsky Constant (LES)    ',CSMAG
      WRITE(LU6,'(A,F8.2)')   '   Turb. Prandtl Number          ',PR
      IF (NSPEC.GT.0.)
     .WRITE(LU6,'(A,F8.2)')   '   Turb. Schmidt Number          ',SC
      ENDIF
      WRITE(LU6,'(A,F8.2)')   '   Ambient Temperature (C)       ',
     .                                                  TMPA-TMPM
C
C Print out information about species
C
      IF (.NOT.MIXTURE_FRACTION .OR. NSPEC.GT.1) THEN
C
      WRITE(LU6,'(//A)') ' Species Information'
      SPEC_LOOP: DO N=1,NSPEC
      IF (SPECIES_ID(N).EQ.'MIXTURE_FRACTION') CYCLE SPEC_LOOP
      WRITE(LU6,'(/3X,A)') SPECIES_ID(N)
      IF (MWN(N).LT.1000.) THEN
      WRITE(LU6,'(A,F8.2)')   '   Molecular Weight (g/mol)      ',MWN(N)
      ELSE
      WRITE(LU6,'(A,F8.2)')   '   Density (kg/m^3)              ',
     .                            MWN(N)*PINF/(TMPA*R0)
      ENDIF
      WRITE(LU6,'(A,F8.3)')   '   Initial Mass Fraction         ',YY0(N)
      IF (NUN(N).NE.0.)
     .WRITE(LU6,'(A,F8.1)')   '   Stoichiometric Coefficient    ',NUN(N)
      IF (DNS) THEN
      WRITE(LU6,'(A,ES8.2)')  '   Viscosity (kg/m/s)   Ambient: ',
     .                            MU_SPEC(N,NINT(0.1*TMPA))
      WRITE(LU6,'(A,ES8.2)')  '                          500 C: ',
     .                            MU_SPEC(N,77)
      WRITE(LU6,'(A,ES8.2)')  '                         1000 C: ',
     .                            MU_SPEC(N,127)
      WRITE(LU6,'(A,ES8.2)')  '                         1500 C: ',
     .                            MU_SPEC(N,177)
      ENDIF
      IF (.NOT.ISOTHERMAL .AND. DNS) THEN
      WRITE(LU6,'(A,ES8.2)')  '   Therm. Cond. (W/m/K) Ambient: ',
     .                            K_SPEC(N,NINT(0.1*TMPA))
      WRITE(LU6,'(A,ES8.2)')  '                          500 C: ',
     .                            K_SPEC(N,77)
      WRITE(LU6,'(A,ES8.2)')  '                         1000 C: ',
     .                            K_SPEC(N,127)
      WRITE(LU6,'(A,ES8.2)')  '                         1500 C: ',
     .                            K_SPEC(N,177)
      ENDIF
      IF (.NOT.ISOTHERMAL .AND. DNS) THEN
      WRITE(LU6,'(A,ES8.2)')  '   Spec. Heat (J/kg/K)  Ambient: ',
     .                            CP(N,NINT(0.1*TMPA))
      WRITE(LU6,'(A,ES8.2)')  '                          500 C: ',
     .                            CP(N,77)
      WRITE(LU6,'(A,ES8.2)')  '                         1000 C: ',
     .                            CP(N,127)
      WRITE(LU6,'(A,ES8.2)')  '                         1500 C: ',
     .                            CP(N,177)
      ENDIF
      IF (N.GT.0 .AND. DNS) THEN
      WRITE(LU6,'(A,ES8.2)')  '   Diff. Coeff. (m^2/s) Ambient: ',
     .                            D_SPEC(N,NINT(0.1*TMPA))
      WRITE(LU6,'(A,ES8.2)')  '                          500 C: ',
     .                            D_SPEC(N,77)
      WRITE(LU6,'(A,ES8.2)')  '                         1000 C: ',
     .                            D_SPEC(N,127)
      WRITE(LU6,'(A,ES8.2)')  '                         1500 C: ',
     .                            D_SPEC(N,177)
      ENDIF
      ENDDO SPEC_LOOP
C
      ENDIF
C
C Print out Stoichiometric parameters for mixture fraction model
C
      IF (MIXTURE_FRACTION) THEN
C
      WRITE(LU6,'(//A/)') ' Mixture Fraction State Relationships'
      WRITE(LU6,'(A,F8.2)')  '   Molecular Weight, Fuel (g/mol)',
     .                                             MW_FUEL+MW_N2*FUEL_N2
      WRITE(LU6,'(A,F8.2)')  '   Stoich. Coeff., Fuel          ',NU_FUEL
      WRITE(LU6,'(A,F8.2)')  '   Stoich. Coeff., Oxygen        ',NU_O2
      WRITE(LU6,'(A,F8.2)')  '   Stoich. Coeff., CO_2          ',NU_CO2
      WRITE(LU6,'(A,F8.2)')  '   Stoich. Coeff., H2O           ',NU_H2O
      WRITE(LU6,'(A,F8.3)')  '   Soot Yield                    ',
     .                                                       SOOT_YIELD
      WRITE(LU6,'(A,F8.3)')  '   CO Yield                      ',
     .                                                       CO_YIELD
      WRITE(LU6,'(A,F8.3)')  '   Stoichiometric Value of Z     ',Z_F
      WRITE(LU6,'(A,F8.0)')  '   Heat of Combustion (kJ/kg)    ',
     .                                           DELTAH_FUEL/1000.
C
      ENDIF
C
C Print out information about surface types
C
      WRITE(LU6,'(//A,I2)')  ' Surface Conditions'
C
      SURFLOOP: DO N=0,NBT-1
C
      IF (IBCDEF.EQ.N) THEN
         WRITE(LU6,'(/I4,1X,A,A)')  N,SURFNAME(N),' (DEFAULT)'
         ELSE
         WRITE(LU6,'(/I4,1X,A)')    N,SURFNAME(N)
         ENDIF
C
      IF (N.EQ.OPEN_INDEX) THEN
      WRITE(LU6,'(A)')      '     Passive Vent to Atmosphere'
      CYCLE SURFLOOP
      ENDIF
C
      IF (N.EQ.MIRROR_INDEX) THEN
      WRITE(LU6,'(A)')      '     Symmetry Plane'
      CYCLE SURFLOOP
      ENDIF
C
      IF (MHC(N).EQ.3) THEN
      WRITE(LU6,'(A)')      '     Thermally Thick Material'
      WRITE(LU6,'(A,F8.3)') '     Thickness (m)               ',
     .                                   WALL_THICKNESS(N)     
      WRITE(LU6,'(A,ES8.2)')'     Density (kg/m3)             ',
     .                                         DENSITY_S(N) 
      IF (C_PV(N).GT.0.)
     .WRITE(LU6,'(A,ES8.2)')'     Specific Heat (kJ/kg/K)     ',
     .                                        C_PV(N)*0.001
      IF (XKS(N).GT.0.)
     .WRITE(LU6,'(A,F8.4)') '     Conductivity (W/m K)        ',
     .                                            XKS(N)
      WRITE(LU6,'(A,F8.1)') '     Ignition Temperature (C)    ',
     .                                            TMP_I(N)-TMPM
      WRITE(LU6,'(A)')      '     Nodes:                      '
      DO I=0,NWP(N)
      WRITE(LU6,'(10X,I3,F10.5)') I,X_S(I,N)
      ENDDO
C
      ENDIF
C
      IF (MHC(N).EQ.2) THEN
      WRITE(LU6,'(A)')      '     Thermally Thin Material'
      WRITE(LU6,'(A,F8.2)') '     C_Delta_Rho (kJ/K-m**2)     ',
     .                                              CDR(N)/1000.
      WRITE(LU6,'(A,F8.1)') '     Ignition Temperature (C)    ',
     .                                            TMP_I(N)-TMPM
      ENDIF
C
      IF (MHC(N).EQ.2 .OR. MHC(N).EQ.3) THEN
      IF (IBACK(N).EQ.1) WRITE(LU6,'(A)') '     Backing to void'
      IF (IBACK(N).EQ.2) WRITE(LU6,'(A)') '     Insulated Backing'
      IF (IBACK(N).EQ.3) WRITE(LU6,'(A)') '     Exposed Backing'
      ENDIF
C
      IF (MHC(N).EQ.1)
     .WRITE(LU6,'(A,F8.1)') '     Wall or Vent Temperature (C)',
     .                               TMP_P(N) - TMPM
      IF (VELS(N).NE.-999.) WRITE(LU6,'(A,F8.3)')
     .                    '     Normal Velocity (m/s)       ',
     .                        VELS(N)
      IF (VFLUX(N).NE.-999.) WRITE(LU6,'(A,F8.3)')
     .                    '     Volume Flux (m**3/s)        ',
     .                    VFLUX(N)
      IF (NSPEC.GT.0 .AND. .NOT.MIXTURE_FRACTION) THEN
      DO NN=1,NSPEC
      IF (MASSFRACS(N,NN).GE.0.) WRITE(LU6,'(A,I1,A,8X,F5.3)')
     .        '     Species ',NN,' Mass Fraction',MASSFRACS(N,NN)
      IF (MASSFLUXS(N,NN).NE.0.) WRITE(LU6,'(A,I1,A,2X,F5.3)')
     .        '     Species ',NN,' Mass Flux (kg/s/m2)',MASSFLUXS(N,NN)
      ENDDO
      ENDIF
C
      IF (MIXTURE_FRACTION .AND. MASSFLUXS(N,IFUEL).GT.0.)
     .   WRITE(LU6,'(A,F8.0)')
     .       '     HRR Per Unit Area (kW/m2)     ',
     .             MASSFLUXS(N,IFUEL)*DELTAH_FUEL*Y_F_INLET*0.001
C
      ENDDO SURFLOOP
C
C Print out information about obstacles
C
      MESH_LOOP_2: DO NM=1,NMESHES
      M => MESH(NM)
      IF (M%NB.GT.0) THEN
      WRITE(LU6,'(//A,I2/)') ' Obstruction Information, Mesh ',NM
      DO N=1,M%NB
      OB=>M%OBSTRUCTION(N)
      WRITE(LU6,72) N,OB%I1,OB%I2,OB%J1,OB%J2,OB%K1,OB%K2,
     .   OB%IBC(-1),OB%IBC(1),OB%IBC(-2),OB%IBC(2),OB%IBC(-3),OB%IBC(3)
      ENDDO
      ENDIF
      ENDDO MESH_LOOP_2
   72 FORMAT(I6,' Nodes:',6I4,', Surface IDs:',6I4)
C
C Print out information about vents
C
      MESH_LOOP_3: DO NM=1,NMESHES
      M => MESH(NM)
      IF (M%NV.GT.0) THEN
      WRITE(LU6,'(//A,I2/)') ' Vent Information, Mesh ',NM
      DO N=1,M%NV
      VT=>M%VENTS(N)
      WRITE(LU6,73) N,VT%I1,VT%I2,VT%J1,VT%J2,VT%K1,VT%K2,VT%IBC
      ENDDO
      ENDIF
      ENDDO MESH_LOOP_3
   73 FORMAT(I6,' Nodes:',6I4,', Surface ID:',I2)
C
C Print out information about sprinkler types
C
      IF (NST.GT.0) WRITE(LU6,'(//A,I2)')  ' Sprinkler Types'
C
      SPRKLOOP: DO N=1,NST
C
      S => SPRINKLER(N)
      WRITE(LU6,'(/I4,1X,A)')  N,TRIM(SPRK_MAKE(N))
      WRITE(LU6,'(A,F8.1)') '     RTI (m-s)^1/2               ',
     .                     S%RTI
      WRITE(LU6,'(A,F8.1)') '     C-Factor (m/s)^1/2          ',
     .                     S%C_FACTOR
      WRITE(LU6,'(A,F8.1)') '     K-Factor (L/min/bar^1/2)    ',
     .                     S%K_FACTOR
      WRITE(LU6,'(A,F8.1)') '     Activation Temperature (C)  ',
     .                     S%TMP_ACT-TMPM
      WRITE(LU6,'(A,F8.3)') '     Operating Pressure (bar)    ',
     .                     S%OPERATING_PRESSURE
      WRITE(LU6,'(A,F8.1)') '     Median Droplet Diam. (mu-m) ',
     .                     S%DROPLET_DIAMETER(1,1)*1.E6
C
      ENDDO SPRKLOOP
C
C Print out sprinkler locations and makes
C
      IF (NSPR.GT.0) THEN
      WRITE(LU6,'(//A/)')   ' Sprinkler Information'
      DO N=1,NSPR
      SH => SPRINKLER_HEAD(N)
      WRITE(LU6,'(I4,A,3F9.3,A,A,A,A)') N,' Coords:',
     .  SH%X,SH%Y,SH%Z,
     .  ', Make: ',TRIM(SPRK_MAKE(SH%INDEX)),
     .  ', Label: ',TRIM(SH%LABEL)
      ENDDO
      ENDIF
C
C Print out Heat Detector info
C
      IF (NHD.GT.0) THEN
      WRITE(LU6,'(//A/)')   ' Heat Detector Information'
      DO N=1,NHD
      HD => HEAT_DETECTOR(N)
      WRITE(LU6,'(I4,A,3F7.1,A,F4.0,A,F4.0,A,A)') N,' Coords:',
     .  HD%X,HD%Y,HD%Z,
     .  ', RTI (ms)^.5: ',HD%RTI,', ACTIVATION_TEMPERATURE (C): ',
     .  HD%TMP_ACT-TMPM,', Label: ',TRIM(HD%LABEL)
      ENDDO
      ENDIF
C
C Print out Smoke Detector info
C
      IF (NSD.GT.0) THEN
      WRITE(LU6,'(//A/)')   ' Smoke Detector Information'
      DO N=1,NSD
      SD => SMOKE_DETECTOR(N)
c     WRITE(LU6,'(I4,A,3F7.1,A,F4.0,A,F4.0,A,A)') N,' Coords:',
      WRITE(LU6,'(I4,A,3F7.1)') N,' Coords:',
     .  SD%X,SD%Y,SD%Z 
c    . ,', RTI (ms)^.5: ',HD%RTI,', ACTIVATION_TEMPERATURE (C): ',
c    .  HD%TMP_ACT-TMPM,', Label: ',TRIM(HD%LABEL)
      ENDDO
      ENDIF
C
C Write out PLOT3D Info
C
      IF (WPLT.LT.TWFIN) THEN
      WRITE(LU6,'(//A/)')   ' PLOT3D Information'
      WRITE(LU6,'(A,F8.3/)')'   Sampling Interval (s)          ',WPLT
      DO N=1,5
      WRITE(LU6,'(I4,A,A)') N,' Quantity: ',TRIM(QUANTITIES(N))
      ENDDO
      ENDIF
C
C Write out Thermocouple Info
C
      IF (NTC.GT.0) THEN
      WRITE(LU6,'(//A/)')   ' Thermocouple Information'
      WRITE(LU6,'(A,F8.3/)')'   Sampling Interval (s)          ',DTTC
      DO N=1,NTC
      TC => THERMOCOUPLE(N)
      WRITE(LU6,'(I4,A,3F9.3,A,A,A,A)') N,' Coords:',TC%X,TC%Y,TC%Z,
     .      ', Quantity: ',TRIM(CDATA(TC%INDEX)),
     .      ', Label: ',   TRIM(TC%LABEL)
      ENDDO
      ENDIF
C
C Write out Isosurface File Info
C
      IF (NIF.GT.0) THEN
      WRITE(LU6,'(//A/)')   ' Isosurface File Information'
      WRITE(LU6,'(A,F8.3/)')'   Sampling Interval (s)          ',DTIF
      DO N=1,NIF
      WRITE(LU6,'(I4,A,A,A,10F8.3)')
     . N,' Quantity: ',CDATA(INDIF(N))(1:20),
     . '   VALUE(S):',(ISOLEVEL(I,N),I=1,NLEVELS(N))
      ENDDO
      ENDIF
C
C Write out Slice File Info
C
      MESH_LOOP_4: DO NM=1,NMESHES
      M => MESH(NM)
      IF (M%NSF.GT.0) THEN
      WRITE(LU6,'(//A,I2/)')   ' Slice File Information, Mesh ',NM
      WRITE(LU6,'(A,F8.3/)')'   Sampling Interval (s)          ',DTSF
      DO N=1,M%NSF
      WRITE(LU6,'(I4,A,6I4,A,A)') N,' Nodes:',
     .     M%ISP1(N),M%ISP2(N),M%JSP1(N),M%JSP2(N),M%KSP1(N),M%KSP2(N),
     .              ', Quantity: ',TRIM(CDATA(M%INDSP(N)))
      ENDDO
      ENDIF
      ENDDO MESH_LOOP_4
C
C Write out Boundary File info
C
      IF (NBF.GT.0) THEN
      WRITE(LU6,'(//A/)')   ' Boundary File Information'
      WRITE(LU6,'(A,F8.3/)')'   Sampling Interval (s)          ',DTBF
      DO N=1,NBF
      WRITE(LU6,'(I4,A,A)') N,' Quantity: ',TRIM(CDATA(INDBF(N)))
      ENDDO
      ENDIF
C
C Write out radiation info
C
      WRITE_RADIATION: IF (RADIATION) THEN
      WRITE(LU6,'(//A/)')  ' Radiation Model Information'
      WRITE(LU6,'(A,I4,A)') '   Radiative heat flux fully updated in',
     .     ANGLE_INCREMENT * TIME_STEP_INCREMENT, ' time steps'
      WRITE(LU6,'(A,I4)') '   Number of control angles ',NRA
      IF (CYLINDRICAL .OR. .NOT.TWO_D) THEN
      WRITE(LU6,'(A)')    '   Theta band N_phi   Solid angle'
      ELSE
      WRITE(LU6,'(A)')    '   Phi band   N_theta Solid angle'
      ENDIF
      N = 1
      DO I=1,NRT
      WRITE(LU6,'(I6,A,I6,F6.2)') I,':   ',NRP(I),RSA(N)
      N = N + NRP(I)
      ENDDO
      IF (NSB.GT.1) THEN
      WRITE(LU6,'(A,I4)')  '   Number of spectral bands is ', NSB
      ELSE
      IF (MIXTURE_FRACTION) THEN
      WRITE(LU6,'(A,I4)')  '   Using gray gas absorption.'
      WRITE(LU6,'(A,F6.3,A)')'   Mean beam length is ',PATH,' m'
      ELSE
      WRITE(LU6,'(A,F6.2,A)')'   Constant absorption coeff. ',KAPPA0
      ENDIF
      ENDIF
      IF (FUEL_EVAPORATION) 
     .WRITE(LU6,'(A)')       '   Extinction by fuel droplets.'
      IF (WATER_EVAPORATION)
     .WRITE(LU6,'(A,A)')     '   Absorption and scattering by water ',
     .                          'droplets (Mie theory).'
      ENDIF WRITE_RADIATION
C
      WRITE(LU6,*)
      WRITE(LU6,*)
C
      END SUBROUTINE INITIALIZE_DIAGNOSTIC_FILE
C
C
      SUBROUTINE DUMP_CORE(T,NM)
C
C Dump data to a file for possible restart
C
      REAL(EB), INTENT(IN) :: T
      INTEGER IBC,NOM
      INTEGER, INTENT(IN) :: NM
      TYPE(OMESH_TYPE), POINTER :: M2
C
      WRITE(FN91,'(A,A,I2.2,A)') TRIM(CHID),'_',NM,'.restart'
      OPEN(LU91,FILE=FN91,FORM='UNFORMATTED',STATUS='REPLACE')
C
      CALL UNPACK_VAR(NM)
C
      WRITE(LU91) U
      WRITE(LU91) V
      WRITE(LU91) W
      WRITE(LU91) D
      WRITE(LU91) H
      WRITE(LU91) RHO
      WRITE(LU91) TMP
      WRITE(LU91) Q
      WRITE(LU91) QR
      WRITE(LU91) UW
      WRITE(LU91) UWS
      WRITE(LU91) TMP_F
      WRITE(LU91) TMP_B
      WRITE(LU91) MASSFLUX
      WRITE(LU91) RHODW
      WRITE(LU91) QRAD
      WRITE(LU91) TW
      WRITE(LU91) WMPUA
      WRITE(LU91) WCPUA
      WRITE(LU91) EW
      WRITE(LU91) KW
      WRITE(LU91) RHO_W
      WRITE(LU91) TMP_W
      WRITE(LU91) RSUM_W
      WRITE(LU91) QPYR
      WRITE(LU91) SOLID
      WRITE(LU91) ICA
      WRITE(LU91) IWA
      WRITE(LU91) IEA
      WRITE(LU91) IJKW
      WRITE(LU91) IJKE
      WRITE(LU91) IV
      WRITE(LU91) INC
      WRITE(LU91) CELL_MASS
      WRITE(LU91) MASS_LOSS
      WRITE(LU91) NWC
      WRITE(LU91) NPATCH
C
      DO IW=1,NWC
      IBC = IJKW(5,IW)
      IF (NWP(IBC).GT.0) WRITE(LU91) WALL(IW)%TMP_S
      IF (RADIATION .AND. IV(IW).NE.2) WRITE(LU91) WALL(IW)%ILW
      ENDDO
      IF (NSPR.GT.0) WRITE(LU91) AVG_DROP_DEN
      IF (NSPR.GT.0) WRITE(LU91) AVG_DROP_RAD
      IF (NSPR.GT.0) WRITE(LU91) AVG_DROP_TMP
      IF (NSPR.GT.0) WRITE(LU91) QR_W
      IF (NSPEC.GT.0) WRITE(LU91) YY
      IF (NSPEC.GT.0) WRITE(LU91) FYY
      IF (NSPEC.GT.0) WRITE(LU91) YY_W
      IF (NV.GT.0) WRITE(LU91) VENTS(1:NV)%T_OPEN,
     .                         VENTS(1:NV)%T_CLOSE
      IF (NB.GT.0) WRITE(LU91) OBSTRUCTION(1:NB)%T_REMOVE,
     .                         OBSTRUCTION(1:NB)%T_CREATE
      IF (DROPLET_FILE) THEN
         WRITE(LU91) NLP,NLPDIM
         WRITE(LU91) DROPLET(1:NLP)
         ENDIF
C
      WRITE(LU91) T,ICYC,PINCLK,SPINCLK,PARCLK(NM),CORCLK(NM),SFCLK(NM),
     .            PLTCLK(NM),BFCLK(NM),TCCLK,SPRKCLK,HRRCLK,MINTCLK,
     .            HEATCLK,ISOCLK(NM),WALLCLK,WALL_COUNTER,DTOLD,DTNEXT,
     .            P0,DP0DT,Z_F_EFF,NEDGES
      DO N=1,NSPR
      WRITE(LU91) SPRINKLER_HEAD(N)%TMP_L,
     .            SPRINKLER_HEAD(N)%ACT_CODE,
     .            SPRINKLER_HEAD(N)%T
      ENDDO
      DO N=1,NHD
      WRITE(LU91) HEAT_DETECTOR(N)%TMP_L
      ENDDO
C
      OTHER_MESH_LOOP: DO NOM=1,NMESHES
      IF (NIC(NM,NOM).EQ.0) CYCLE OTHER_MESH_LOOP
      M2=>MESH(NM)%OMESH(NOM)
      WRITE(LU91) M2%TMP,M2%U,M2%V,M2%W,M2%H
      IF (NSPEC.GT.0) WRITE(LU91) M2%YY,M2%YYS
      WRITE(LU91) M2%IJKW
      ENDDO OTHER_MESH_LOOP
C
      CLOSE(LU91)
C
      END SUBROUTINE DUMP_CORE
C
C
      SUBROUTINE READ_CORE(T,NM)
C
C Read data from a previous calculation
C
      REAL(EB), INTENT(OUT) :: T
      INTEGER IBC,NOM
      INTEGER, INTENT(IN) :: NM
      TYPE(OMESH_TYPE), POINTER :: M2
C
      WRITE(FN90,'(A,A,I2.2,A)') TRIM(CHID),'_',NM,'.restart'
      INQUIRE(FILE=FN90,EXIST=EX)
      IF (.NOT.EX) RETURN
C
      OPEN(LU90,FILE=FN90,FORM='UNFORMATTED',STATUS='OLD')
C
      CALL UNPACK_VAR(NM)
C
      READ(LU90)  U
      READ(LU90)  V
      READ(LU90)  W
      READ(LU90)  D
      READ(LU90)  H
      READ(LU90)  RHO
      READ(LU90)  TMP
      READ(LU90)  Q
      READ(LU90)  QR
      READ(LU90)  UW
      READ(LU90)  UWS
      READ(LU90)  TMP_F
      READ(LU90)  TMP_B
      READ(LU90)  MASSFLUX
      READ(LU90)  RHODW
      READ(LU90)  QRAD
      READ(LU90)  TW
      READ(LU90)  WMPUA
      READ(LU90)  WCPUA
      READ(LU90)  EW
      READ(LU90)  KW
      READ(LU90)  RHO_W
      READ(LU90)  TMP_W
      READ(LU90)  RSUM_W
      READ(LU90)  QPYR
      READ(LU90)  SOLID
      READ(LU90)  ICA
      READ(LU90)  IWA
      READ(LU90)  IEA
      READ(LU90)  IJKW
      READ(LU90)  IJKE
      READ(LU90)  IV
      READ(LU90)  INC
      READ(LU90)  CELL_MASS
      READ(LU90)  MASS_LOSS
      READ(LU90)  NWC
      READ(LU90)  NPATCH
C
      DO IW=1,NWC
      IBC = IJKW(5,IW)
      IF (NWP(IBC).GT.0) THEN
         NULLIFY(MESH(NM)%WALL(IW)%TMP_S)
         ALLOCATE(MESH(NM)%WALL(IW)%TMP_S(0:NWP(IBC)+1))
         READ(LU90) MESH(NM)%WALL(IW)%TMP_S
         ENDIF
      IF (RADIATION .AND. IV(IW).NE.2) READ(LU90) WALL(IW)%ILW
      ENDDO
      IF (NSPR.GT.0) READ(LU90)  AVG_DROP_DEN
      IF (NSPR.GT.0) READ(LU90)  AVG_DROP_RAD
      IF (NSPR.GT.0) READ(LU90)  AVG_DROP_TMP
      IF (NSPR.GT.0) READ(LU90)  QR_W
      IF (NSPEC.GT.0) READ(LU90)  YY
      IF (NSPEC.GT.0) READ(LU90)  FYY
      IF (NSPEC.GT.0) READ(LU90)  YY_W
      IF (NV.GT.0) READ(LU90)  VENTS(1:NV)%T_OPEN,
     .                         VENTS(1:NV)%T_CLOSE
      IF (NB.GT.0) READ(LU90)  OBSTRUCTION(1:NB)%T_REMOVE,
     .                         OBSTRUCTION(1:NB)%T_CREATE
      IF (DROPLET_FILE) THEN
         READ(LU90) NLP,NLPDIM
         DEALLOCATE(MESH(NM)%DROPLET)
         ALLOCATE(MESH(NM)%DROPLET(1:NLPDIM))
         READ(LU90) MESH(NM)%DROPLET(1:NLP)
         ENDIF
C
      READ(LU90)  T,ICYC,PINCLK,SPINCLK,PARCLK(NM),CORCLK(NM),SFCLK(NM),
     .            PLTCLK(NM),BFCLK(NM),TCCLK,SPRKCLK,HRRCLK,MINTCLK,
     .            HEATCLK,ISOCLK(NM),WALLCLK,WALL_COUNTER,DTOLD,DTNEXT,
     .            P0,DP0DT,Z_F_EFF,NEDGES
      DO N=1,NSPR
      READ(LU90)  SPRINKLER_HEAD(N)%TMP_L,
     .            SPRINKLER_HEAD(N)%ACT_CODE,
     .            SPRINKLER_HEAD(N)%T
      ENDDO
      DO N=1,NHD
      READ(LU90) HEAT_DETECTOR(N)%TMP_L
      ENDDO
C
      OTHER_MESH_LOOP: DO NOM=1,NMESHES
      IF (NIC(NM,NOM).EQ.0) CYCLE OTHER_MESH_LOOP
      M2=>MESH(NM)%OMESH(NOM)
      READ(LU90) M2%TMP,M2%U,M2%V,M2%W,M2%H
      IF (NSPEC.GT.0) READ(LU90) M2%YY,M2%YYS
      READ(LU90) M2%IJKW
      ENDDO OTHER_MESH_LOOP
C
      CLOSE(LU90)
C
      END SUBROUTINE READ_CORE
C
C
      SUBROUTINE WRITE_DIAGNOSTICS(T)
C
C Write cycle number, elapsed time since the last call,
C current time for the physical system, and current number of
C particles in the system.
C
      REAL(EB), INTENT(IN) :: T(NMESHES)
      REAL(EB) Z_RATIO
      INTEGER NM,DATE_TIME(8)
      CHARACTER(10) :: BIG_BEN(3),MONTH
C
      IF (ICYC.EQ.1) WRITE(LU6,100)
C
      CALL DATE_AND_TIME(BIG_BEN(1),BIG_BEN(2),BIG_BEN(3),DATE_TIME)
      SELECT CASE(DATE_TIME(2))
      CASE(1) ; MONTH='January'
      CASE(2) ; MONTH='February'
      CASE(3) ; MONTH='March'
      CASE(4) ; MONTH='April'
      CASE(5) ; MONTH='May'
      CASE(6) ; MONTH='June'
      CASE(7) ; MONTH='July'
      CASE(8) ; MONTH='August'
      CASE(9) ; MONTH='September'
      CASE(10); MONTH='October'
      CASE(11); MONTH='November'
      CASE(12); MONTH='December'
      END SELECT
C
      WRITE(LU0,'(1X,A,I7,A,F10.2,A)') 
     .   'Iteration:',ICYC,',    Simulation Time:',T(1),' s'
C
      WRITE(LU6,'(7X,A,I6,3X,A,I3,A,I4,2X,I2.2,A,I2.2,A,I2.2)') 
     .   'Iteration ',ICYC,TRIM(MONTH),DATE_TIME(3),', ',DATE_TIME(1),
     .   DATE_TIME(5),':',DATE_TIME(6),':',DATE_TIME(7)
      WRITE(LU6,'(7X,A)')
     .   '----------------------------------------------'
C
      DO NM=1,NMESHES
      IF (NMESHES.GT.1)
     .WRITE(LU6,'(6X,A,I2,A,I6)') ' Mesh ',NM,', Cycle ',NTCYC(NM)
      M => MESH(NM)
      IF (T_ACCUM(NM).LT.60.) WRITE(LU6,110) T_PER_STEP(NM),T_ACCUM(NM)
      IF (T_ACCUM(NM).GE.60. .AND. T_ACCUM(NM).LT.3600.)
     .   WRITE(LU6,112) T_PER_STEP(NM),T_ACCUM(NM)/60.
      IF (T_ACCUM(NM).GE.3600.) 
     .   WRITE(LU6,113) T_PER_STEP(NM),T_ACCUM(NM)/3600.
      WRITE(LU6,111) M%DT,T(NM),
     .               M%CFL,M%ICFL,M%JCFL,M%KCFL,
     .               M%DIVMX,M%IMX,M%JMX,M%KMX,
     .               M%DIVMN,M%IMN,M%JMN,M%KMN
      IF (ABS(M%RESMAX).GT.1.E-8)
     .   WRITE(LU6,133) M%RESMAX,M%IRM,M%JRM,M%KRM
      IF (ABS(M%POIS_PTB).GT.1.E-10)
     .   WRITE(LU6,'(A,E8.2)') '       Poisson Pert. : ',M%POIS_PTB
      IF (CHECK_POISSON)
     .   WRITE(LU6,'(A,E8.2)') '       Poisson Error : ',M%POIS_ERR
      IF (DNS) WRITE(LU6,230) M%VN,M%I_VN,M%J_VN,M%K_VN
      IF (ABS(M%P0-PINF).GT.10.) WRITE(LU6,130) M%P0/101325.
      IF (MIXTURE_FRACTION .AND. HRR(NM).GT.1.) THEN
         Z_RATIO = M%Z_F_EFF/Z_F
         IF (Z_RATIO.LT.0.99) WRITE(LU6,421) Z_RATIO
         ENDIF
      IF (M%NLP.GT.0) WRITE(LU6,141) M%NLP
      IF (ABS(HRR(NM) ).GT.1.) WRITE(LU6,119)  HRR(NM)/1000.
      IF (ABS(RHRR(NM)).GT.1.) WRITE(LU6,120) -RHRR(NM)/1000.
      ENDDO
C
      WRITE(LU6,*)
C
  100 FORMAT(/' Run Time Diagnostics'/)
  110 FORMAT(6X,' CPU/step:  ',F8.3,' s, Total CPU:  ',F8.2,' s')
  112 FORMAT(6X,' CPU/step:  ',F8.3,' s, Total CPU:  ',F8.2,' min')
  113 FORMAT(6X,' CPU/step:  ',F8.3,' s, Total CPU:  ',F8.2,' hr')
  111 FORMAT(6X,' Time step: ',F8.5,' s, Total time: ',F8.2,' s'/
     .       6X,' Max CFL number: ',E8.2,' at (',I3,',',I3,',',I3,')'/
     .       6X,' Max divergence: ',E8.2,' at (',I3,',',I3,',',I3,')'/
     .       6X,' Min divergence: ',E8.2,' at (',I3,',',I3,',',I3,')')
  133 FORMAT(6X,' Max div. error: ',E8.2,' at (',I3,',',I3,',',I3,')')
  230 FORMAT(6X,' Max VN  number: ',E8.2,' at (',I3,',',I3,',',I3,')')
  130 FORMAT(6X,' Background pressure:          ',F12.5,' atm')
  119 FORMAT(6X,' Total Heat Release Rate:      ',F13.3,' kW')
  120 FORMAT(6X,' Radiation Loss to Boundaries: ',F13.3,' kW')
  421 FORMAT(6X,' Fire Resolution Index:        ',F12.3)
  141 FORMAT(6X,' No. of Lagrangian Particles:  ',I12)
C
      END SUBROUTINE WRITE_DIAGNOSTICS
C
C
      SUBROUTINE DUMP_PART(T,NM)
C
C Dump particle data to CHID.part
C
      INTEGER, INTENT(IN) :: NM
      REAL(EB) T
      INTEGER NDLIM,NPP,NPLIM
      REAL(FB), ALLOCATABLE, DIMENSION(:) :: BRP,XPP,YPP,ZPP
C
      TNOW=SECOND() 
C
      CALL UNPACK_VAR(NM)
C
C Count the number of particles and droplets to dump out
C
      NPLIM = 0
      NDLIM = 0
C
      DO I=1,NLP
      DR=>DROPLET(I)
      IPC=DR%CLASS
      LP=>LAGRANGIAN(IPC)
      IF (DR%SHOW.AND. .NOT.LP%WATER) NPLIM = NPLIM + 1
      IF (DR%SHOW.AND.      LP%WATER) NDLIM = NDLIM + 1
      ENDDO
C
      NPLIM = MIN(NPPS,NPLIM)
      NDLIM = MIN(NPPS,NDLIM)
C
      ALLOCATE(XPP(NPLIM+NDLIM+1),STAT=IZERO)
      CALL ChkMemErr('DUMP','XPP',IZERO)
      ALLOCATE(YPP(NPLIM+NDLIM+1),STAT=IZERO)
      CALL ChkMemErr('DUMP','YPP',IZERO)
      ALLOCATE(ZPP(NPLIM+NDLIM+1),STAT=IZERO)
      CALL ChkMemErr('DUMP','ZPP',IZERO)
      ALLOCATE(BRP(NPLIM+NDLIM+1),STAT=IZERO)
      CALL ChkMemErr('DUMP','BRP',IZERO)
C
C Load sprinkler droplet coordinates into single precision array
C
      NPP = 0
C
      PLOOP: DO I=1,NLP
      DR=>DROPLET(I)
      IPC=DR%CLASS
      LP=>LAGRANGIAN(IPC)
      IF (.NOT.DR%SHOW .OR. LP%WATER) CYCLE PLOOP
      NPP = NPP + 1
      XPP(NPP) = DR%X
      YPP(NPP) = DR%Y
      ZPP(NPP) = DR%Z
      SELECT CASE(IPART)
         CASE(-1)     ; BRP(NPP) = DR%TMP - TMPM
         CASE(-3)     ; BRP(NPP) = 2.E6*DR%R
         CASE(-4)     ; BRP(NPP) = SQRT(DR%U**2+DR%V**2+DR%W**2)
         CASE(-6)     ; BRP(NPP) = T-DR%T
         CASE DEFAULT ; BRP(NPP) = LP%COLOR_INDEX
         END SELECT
      IF (NPP.GE.NPPS) EXIT PLOOP
      ENDDO PLOOP
C
      SLOOP: DO I=1,NLP
      DR=>DROPLET(I)
      IPC=DR%CLASS
      LP=>LAGRANGIAN(IPC)
      IF (.NOT.DR%SHOW .OR. .NOT.LP%WATER) CYCLE SLOOP
      NPP = NPP + 1
      XPP(NPP) = DR%X
      YPP(NPP) = DR%Y
      ZPP(NPP) = DR%Z
      SELECT CASE(IPART)
         CASE(-6)     ; BRP(NPP) = T-DR%T
         CASE(-5)     ; BRP(NPP) = DR%IOR
         CASE(-4)     ; BRP(NPP) = SQRT(DR%U**2+DR%V**2+DR%W**2)
         CASE(-3)     ; BRP(NPP) = 2.E6*DR%R
         CASE(-1)     ; BRP(NPP) = DR%TMP - TMPM
         CASE DEFAULT ; BRP(NPP) = LP%COLOR_INDEX
         END SELECT
      IF (NPP-NPLIM.GE.NPPS) EXIT SLOOP
      ENDDO SLOOP
C
C Dump into the .part file
C
      NN  = 1
      STIME = T
      LUPF = 7000+NM
      SELECT CASE(NDLIM)
      CASE(1:) ; WRITE(LUPF) STIME,NPLIM,NN,INT(1),(INT(1),N=2,NSPR)
      CASE(0 ) ; WRITE(LUPF) STIME,NPLIM,NN,INT(0),(INT(0),N=2,NSPR)
      END SELECT
      WRITE(LUPF) (XPP(I),I=1,NPLIM),
     .            (YPP(I),I=1,NPLIM),
     .            (ZPP(I),I=1,NPLIM),
     .            (BRP(I),I=1,NPLIM)
C
      IF (NDLIM.GT.0) THEN
C
      IF (IPART.EQ.0) THEN
      WRITE(LUPF) NDLIM
      WRITE(LUPF) (XPP(I),I=NPLIM+1,NPLIM+NDLIM),
     .            (YPP(I),I=NPLIM+1,NPLIM+NDLIM),
     .            (ZPP(I),I=NPLIM+1,NPLIM+NDLIM)
      ELSE
      WRITE(LUPF) -NDLIM
      WRITE(LUPF) (XPP(I),I=NPLIM+1,NPLIM+NDLIM),
     .            (YPP(I),I=NPLIM+1,NPLIM+NDLIM),
     .            (ZPP(I),I=NPLIM+1,NPLIM+NDLIM),
     .            (BRP(I),I=NPLIM+1,NPLIM+NDLIM)
      ENDIF
C
      ENDIF
C
      DEALLOCATE(XPP)
      DEALLOCATE(YPP)
      DEALLOCATE(ZPP)
      DEALLOCATE(BRP)
C
      TUSED(7,NM) = TUSED(7,NM) + SECOND() - TNOW
      END SUBROUTINE DUMP_PART
C
C
      SUBROUTINE DUMP_ISO(T,NM)
C
      REAL(EB) T,SUM
      INTEGER  ISOOFFSET,DATAFLAG
      INTEGER, INTENT(IN) :: NM
      REAL(EB), POINTER, DIMENSION(:,:,:) :: FF,B,S
C
      TNOW=SECOND()
C
      STIME = T
      DATAFLAG = 1
C
      CALL UNPACK_VAR(NM)
C
C Set up blockage arrays
C
      B => WORK1 ; B = 1.
      S => WORK2 ; S = 0.
C
      DO K=0,KBP1
      DO J=0,JBP1
      DO I=0,IBP1
      IF (SOLID(ICA(I,J,K))) B(I,J,K) = 0.
      ENDDO
      ENDDO
      ENDDO
C
      IBLK = 1
C
      DO K=1,KBAR
      DO J=1,JBAR
      DO I=1,IBAR
      IF (SOLID(ICA(I,J,K))) IBLK(I,J,K) = 0
      ENDDO
      ENDDO
      ENDDO
C
      DO K=0,KBAR
      DO J=0,JBAR
      DO I=0,IBAR
      SUM = B(I,J,K)+B(I+1,J+1,K+1)+
     .      B(I+1,J,K)+B(I,J+1,K)+B(I,J,K+1)+
     .      B(I+1,J+1,K)+B(I+1,J,K+1)+B(I,J+1,K+1)
      IF (SUM.GT.0.) S(I,J,K) = 1./SUM
      ENDDO
      ENDDO
      ENDDO
C
C Special stoichiometric contour
C
      IF (MIXTURE_FRACTION) ISOLEVEL(1,1) = Z_F_EFF
C
C Run through ISOF files
C
      ISOF_LOOP: DO N=1,NIF
C
      IF (NMESHES.GT.1)
     .WRITE(FNSF,'(A,A,I2.2,A,I2.2,A)') TRIM(CHID),'_',NM,'_',N,'.iso'
      IF (NMESHES.EQ.1)
     .WRITE(FNSF,'(A,A,I2.2,A)') TRIM(CHID),'_',N,'.iso'
      ERROR = 0
      ISOOFFSET = 1
C
      SELECT CASE(INDIF(N))
      CASE(1)  ; FF => RHO
      CASE(5)  ; FF => TMP 
      CASE(11) ; FF => Q   
      CASE(16) ; FF => KAPPA
      CASE(18) ; FF => UII
      CASE(51:55) ; FF => WORK3 ; FF = YY(:,:,:,INDIF(N)-50)
      END SELECT
C
      DO K=0,KBAR
      DO J=0,JBAR
      DO I=0,IBAR
      QQ(I,J,K,1) = S(I,J,K)*(FF(I,J,K)*B(I,J,K)+
     .                        FF(I+1,J,K)*B(I+1,J,K)+
     .                        FF(I,J,K+1)*B(I,J,K+1)+
     .                        FF(I+1,J,K+1)*B(I+1,J,K+1)+
     .                        FF(I,J+1,K)*B(I,J+1,K)+
     .                        FF(I+1,J+1,K)*B(I+1,J+1,K)+
     .                        FF(I,J+1,K+1)*B(I,J+1,K+1)+
     .                        FF(I+1,J+1,K+1)*B(I+1,J+1,K+1))
      ENDDO
      ENDDO
      ENDDO
C
      SELECT CASE(INDIF(N))
      CASE(5)  ; QQ = QQ-TMPM
      CASE(11) ; QQ = QQ*0.001
      CASE(18) ; QQ = QQ*0.001
      END SELECT
C
      IF (INDIF2(N).EQ.0) THEN
C
      CALL ISO2FILE(TRIM(FNSF)//CHAR(0),STIME,
     .QQ(0:IBAR,0:JBAR,0:KBAR,1),IBLK,ISOLEVEL(1:NLEVELS(N),N),
     .NLEVELS(N),XPLT,IBP1,YPLT,JBP1,ZPLT,KBP1,ISOOFFSET,
     .REDUCETRIANGLES(N),ERROR)
C
      ELSE
C
      SELECT CASE(INDIF2(N))
      CASE(1)  ; FF => RHO
      CASE(5)  ; FF => TMP
      CASE(11) ; FF => Q
      CASE(16) ; FF => KAPPA
      CASE(18) ; FF => UII
      CASE(51:55) ; FF => WORK3 ; FF = YY(:,:,:,INDIF(N)-50)
      END SELECT
C
      DO K=0,KBAR
      DO J=0,JBAR
      DO I=0,IBAR
      QQ(I,J,K,2) = S(I,J,K)*(FF(I,J,K)*B(I,J,K)+
     .                        FF(I+1,J,K)*B(I+1,J,K)+
     .                        FF(I,J,K+1)*B(I,J,K+1)+
     .                        FF(I+1,J,K+1)*B(I+1,J,K+1)+
     .                        FF(I,J+1,K)*B(I,J+1,K)+
     .                        FF(I+1,J+1,K)*B(I+1,J+1,K)+
     .                        FF(I,J+1,K+1)*B(I,J+1,K+1)+
     .                        FF(I+1,J+1,K+1)*B(I+1,J+1,K+1))
      ENDDO
      ENDDO
      ENDDO
C
      SELECT CASE(INDIF2(N))
      CASE(5)  ; QQ(:,:,:,2) = QQ(:,:,:,2)-TMPM
      CASE(11) ; QQ(:,:,:,2) = QQ(:,:,:,2)*0.001
      CASE(18) ; QQ(:,:,:,2) = QQ(:,:,:,2)*0.001
      END SELECT
C
      CALL ISOT2FILE(TRIM(FNSF)//CHAR(0),STIME,
     .QQ(0:IBAR,0:JBAR,0:KBAR,1),DATAFLAG,
     .QQ(0:IBAR,0:JBAR,0:KBAR,2),
     .IBLK,ISOLEVEL(1:NLEVELS(N),N),
     .NLEVELS(N),XPLT,IBP1,YPLT,JBP1,ZPLT,KBP1,ISOOFFSET,
     .REDUCETRIANGLES(N),ERROR)
C
      ENDIF
C
      ENDDO ISOF_LOOP
C
      TUSED(7,NM) = TUSED(7,NM) + SECOND() - TNOW
      END SUBROUTINE DUMP_ISO
C
C
      SUBROUTINE DUMP_SMOKE3D(T,NM)
C
      REAL(EB), INTENT(IN) :: T
      INTEGER,  INTENT(IN) :: NM
      INTEGER  DATAFLAG
      REAL(FB) DXX,EXTCOEF
      REAL(EB), POINTER, DIMENSION(:,:,:) :: FF
C
      TNOW=SECOND()
C
      STIME = T
      EXTCOEF = MASS_EXTINCTION_COEFFICIENT/1000.
C
      CALL UNPACK_VAR(NM)
C
      DXX     = DX(1)
      FF => WORK3
C
      DATA_LOOP: DO DATAFLAG=1,3
C
      IF (IWATER.EQ.0 .AND. DATAFLAG.EQ.3) CYCLE DATA_LOOP
C
      SELECT CASE(DATAFLAG)
      CASE(1)
      DO K=0,KBP1
      DO J=0,JBP1
      DO I=0,IBP1
      YYHAT = YY(I,J,K,IFUEL)
      YYHAT = MIN(1._EB,MAX(0._EB,YYHAT))
      IYY1  = FLOOR(YYHAT*10000.)
      IFAC  = YYHAT*10000. - IYY1
      IYY2  = MIN(10000,IYY1+1)
      Y_EXTRA = 0.
      DO NN=1,NSPEC
      IF (NN.NE.IFUEL) Y_EXTRA = Y_EXTRA + YY(I,J,K,NN)
      ENDDO
      Y_STATE_INT  = (1.-IFAC)*Y_STATE(IYY1,8) +
     .                   IFAC *Y_STATE(IYY2,8)
      FF(I,J,K) = Y_STATE_INT*RHO(I,J,K)*(1.-Y_EXTRA)*1.E6
      ENDDO
      ENDDO
      ENDDO
      CASE(2)
      FF = Q*0.001
      CASE(3)
      FF = YY(:,:,:,IWATER)
      END SELECT

      DO K=0,KBAR
      DO J=0,JBAR
      DO I=0,IBAR
      QQ(I,J,K,1) = (FF(I,J,K)  +FF(I+1,J,K)+
     .               FF(I,J,K+1)+FF(I+1,J,K+1)+
     .               FF(I,J+1,K)+FF(I+1,J+1,K)+
     .               FF(I,J+1,K+1)+FF(I+1,J+1,K+1))*0.125
      ENDDO
      ENDDO
      ENDDO
C
      CALL SMOKE3DTOFILE(TRIM(SMOKE3D_FILE(DATAFLAG,NM))//CHAR(0),
     .     STIME,DXX,EXTCOEF,DATAFLAG,
     .     PACK(QQ(0:IBAR,0:JBAR,0:KBAR,1),MASK=.TRUE.),
     .     IBP1,JBP1,KBP1)
C
      ENDDO DATA_LOOP
C
      TUSED(7,NM) = TUSED(7,NM) + SECOND() - TNOW
      END SUBROUTINE DUMP_SMOKE3D
C
C
      SUBROUTINE DUMP_SF(T,NM,IFRMT)
C
      INTEGER, INTENT(IN) :: NM
      REAL(EB) T,XSTR,YSTR,ZSTR,XVOR,YVOR,ZVOR,SUM,ZZZ
      INTEGER IFRMT,NSFX
      REAL(EB), POINTER, DIMENSION(:,:,:) :: B,S,YYP,NU_P
      REAL(EB), POINTER, DIMENSION(:,:,:) :: WFX,WFY,WFZ
C
C
      TNOW=SECOND() 
C
      IF (MESH(NM)%NSF.EQ.0 .AND. IFRMT.EQ.0) RETURN
C
      CALL UNPACK_VAR(NM)
C
C Set up blockage arrays
C
      B => WORK1 ; B = 0.
      S => WORK2 ; S = 0.
C
      DO K=0,KBP1
      DO J=0,JBP1
      DO I=0,IBP1
      IF (.NOT.SOLID(ICA(I,J,K))) B(I,J,K) = 1.
      ENDDO
      ENDDO
      ENDDO
C
      DO K=0,KBAR
      DO J=0,JBAR
      DO I=0,IBAR
      SUM = B(I,J,K)+B(I+1,J+1,K+1)+
     .      B(I+1,J,K)+B(I,J+1,K)+B(I,J,K+1)+
     .      B(I+1,J+1,K)+B(I+1,J,K+1)+B(I,J+1,K+1)
      IF (SUM.GT.0.) S(I,J,K) = 1./SUM
      ENDDO
      ENDDO
      ENDDO
C
C If sprinkler diagnostic on
C
      IF (ISPDIAG.EQ.1 .AND. IFRMT.EQ.0) THEN
C
      WFX => WORK4 ; WFX = 0.
      WFY => WORK5 ; WFY = 0.
      WFZ => WORK6 ; WFZ = 0.
C
      DLOOP: DO I=1,NLP
      DR=>DROPLET(I)
      IPC=DR%CLASS
      LP=>LAGRANGIAN(IPC)
      IF (DR%X.LE.XS) CYCLE DLOOP
      IF (DR%X.GE.XF) CYCLE DLOOP
      IF (DR%Y.LE.YS) CYCLE DLOOP
      IF (DR%Y.GE.YF) CYCLE DLOOP
      IF (DR%Z.LE.ZS) CYCLE DLOOP
      IF (DR%Z.GE.ZF) CYCLE DLOOP
      XI = CELLSI(NINT((DR%X-XS)*RDXINT))
      YJ = CELLSJ(NINT((DR%Y-YS)*RDYINT))
      ZK = CELLSK(NINT((DR%Z-ZS)*RDZINT))
      II = XI + 1.
      JJ = YJ + 1.
      KK = ZK + 1.
      DROPMASS = DR%PWT*LP%FTPR*DR%R**3
      RVC = RDX(II)*RRN(II)*RDY(JJ)*RDZ(KK)
      WFX(II,JJ,KK) = WFX(II,JJ,KK) + DROPMASS*DR%U*RVC
      WFY(II,JJ,KK) = WFY(II,JJ,KK) + DROPMASS*DR%V*RVC
      WFZ(II,JJ,KK) = WFZ(II,JJ,KK) + DROPMASS*DR%W*RVC
      ENDDO DLOOP
C
      WFX(:,:,0) = WFX(:,:,1)
      WFY(:,:,0) = WFY(:,:,1)
      WFZ(:,:,0) = WFZ(:,:,1)
C
      ENDIF
C
C If layer height
C
      LAYER_CALC: IF (LAYER_HEIGHT) THEN
C
      DO J=1,JBAR
      DO I=1,IBAR
C
      CALL GET_LAYER_HEIGHT(I,J,K_LAYER_CALC_LO,K_LAYER_CALC_HI,
     .   Z_INT(I,J),TMP_UP(I,J),TMP_LOW(I,J),KAP_UP(I,J),RAD_UP(I,J))
C
      ENDDO
      ENDDO
C
      ENDIF LAYER_CALC
C
C Slice plane files or PLOT3D ''q'' files
C
      ONE  = 1.
      ZERO = 0.
      NSFX = NSF
C
      IF (IFRMT.EQ.0) NQT = 1
      IF (IFRMT.EQ.1) NQT = 5
C
      IF (IFRMT.EQ.1) THEN
      I1   = 0
      I2   = IBAR
      J1   = 0
      J2   = JBAR
      K1   = 0
      K2   = KBAR
      NSFX = 1
      ITM  = INT(T)
      ITM1 = (T-ITM)*100
      REYN = 0.
      IF (TWFIN.LT.10000.) THEN
      IF (NMESHES.GT.1)
     .WRITE(FN14,'(A,A,I2.2,A1,I4.4,A,I2.2,A2)')
     .            TRIM(CHID),'_',NM,'_',ITM,'_',ITM1,'.q'
      IF (NMESHES.EQ.1)
     .WRITE(FN14,'(A,A1,I4.4,A,I2.2,A2)')
     .            TRIM(CHID),'_',ITM,'_',ITM1,'.q'
      ELSE
      IF (NMESHES.GT.1)
     .WRITE(FN14,'(A,A,I2.2,A1,I5.5,A,I2.2,A2)')
     .            TRIM(CHID),'_',NM,'_',ITM,'_',ITM1,'.q'
      IF (NMESHES.EQ.1)
     .WRITE(FN14,'(A,A1,I5.5,A,I2.2,A2)')
     .            TRIM(CHID),'_',ITM,'_',ITM1,'.q'
      ENDIF
      IF (N_STRINGS+5.GT.N_STRINGS_MAX) THEN
         CALL RE_ALLOCATE_STRINGS(NM)
         STRING => MESH(NM)%STRING
         ENDIF
      N_STRINGS = N_STRINGS + 1
      WRITE(STRING(N_STRINGS),'(A,I5,A,I2.2,1X,I4)') 
     .                   'PL3D ',ITM,'.',ITM1,NM
      N_STRINGS = N_STRINGS + 1
      WRITE(STRING(N_STRINGS),'(A)') FN14
      DO IQ=1,5
      N_STRINGS = N_STRINGS + 1
      WRITE(STRING(N_STRINGS),'(A)') CDATA(IPLOT3D(IQ))
      N_STRINGS = N_STRINGS + 1
      WRITE(STRING(N_STRINGS),'(A)') SDATA(IPLOT3D(IQ))
      N_STRINGS = N_STRINGS + 1
      WRITE(STRING(N_STRINGS),'(A)') UDATA(IPLOT3D(IQ))
      ENDDO
      OPEN(LU14,FILE=FN14,FORM='UNFORMATTED',STATUS='REPLACE')
      ENDIF
C
      SLICE_LOOP: DO N=1,NSFX
C
      IF (IFRMT.EQ.0) THEN
      IND = INDSP(N)
      I1  = ISP1(N)
      I2  = ISP2(N)
      J1  = JSP1(N)
      J2  = JSP2(N)
      K1  = KSP1(N)
      K2  = KSP2(N)
      ENDIF
C
      QUAN_LOOP: DO IQ=1,NQT
C
      IF (IFRMT.EQ.1) IND = IPLOT3D(IQ)
C
      IF (IND.GE.91 .AND. IND.LE.95 .AND. NSPEC.GT.0) THEN
         YYP => WORK3
         YYP(:,:,:) = YY(:,:,:,IND-90)/RSUM(:,:,:)
         ENDIF
C
      IF (IND.EQ.13) THEN
         NU_P => WORK3 
         NU_P =  MU/RHO
         ENDIF
C
C Loop through the slice indices
C
      DO K=K1,K2
      DO J=J1,J2
      DO I=I1,I2
C
      IF (LDATA(IND,1)) DENS = CORNER_VALUE(RHO,B,S,RHOA)
C
      IF (IND.EQ.5) TMP_G = CORNER_VALUE(TMP,B,S,TMPA)
C
      IF (IND.EQ.2 .OR. IND.EQ.6 .OR. IND.EQ.9 .OR. IND.EQ.10 .OR.
     .    (IND.GE.61 .AND. IND.LE.65) )
     .UU = FACE_VALUE(U,B,S,0._EB,1)
C
      IF (IND.EQ.3 .OR. IND.EQ.7 .OR. IND.EQ.9 .OR. IND.EQ.10 .OR.
     .    (IND.GE.71 .AND. IND.LE.75) )
     .VV = FACE_VALUE(V,B,S,0._EB,2)
C
      IF (IND.EQ.4 .OR. IND.EQ.8 .OR. IND.EQ.9 .OR. IND.EQ.10 .OR.
     .    (IND.GE.81 .AND. IND.LE.85) )
     .WW = FACE_VALUE(W,B,S,0._EB,3)
C
      IF (IND.EQ.9 .OR. IND.EQ.10) VEL2 = UU*UU + VV*VV + WW*WW
C
      IF (IND.EQ.9 .OR. IND.EQ.12) HAVG = CORNER_VALUE(H,B,S,0.0_EB)
C
      IF (IND.EQ.11) QDIM = CORNER_VALUE(Q,B,S,0.0_EB)
C
      IF (IND.EQ.13) NUINT = CORNER_VALUE(NU_P,B,S,0.0_EB)
C
      IF (IND.EQ.17) MUINT = CORNER_VALUE(MU,B,S,0.0_EB)
C
      IF (IND.EQ.18) UIIINT = CORNER_VALUE(UII,B,S,4.*SIGMA*TMPA4)
C
      IF (IND.EQ.19) QDIM = CORNER_VALUE(QR  ,B,S,0.0_EB)
      IF (IND.EQ.38) QDIM = CORNER_VALUE(QR_W,B,S,0.0_EB)
C
      IF (IND.EQ.14) DDD = CORNER_VALUE(D,B,S,0.0_EB)
C
      IF (IND.EQ.15) WDINT = CORNER_VALUE(AVG_DROP_DEN,B,S,0.0_EB)
C
      IF (IND.EQ.16) XKAP = CORNER_VALUE(KAPPA,B,S,KAPPA0)
C
      IF (IND.EQ.24)
     .XSTR = .5*(W(I,J+1,K)-W(I,J,K)+W(I+1,J+1,K)-W(I+1,J,K))*RDYN(J)+
     .       .5*(V(I,J,K+1)-V(I,J,K)+V(I+1,J,K+1)-V(I+1,J,K))*RDZN(K)
      IF (IND.EQ.25)
     .YSTR = .5*(U(I,J,K+1)-U(I,J,K)+U(I,J+1,K+1)-U(I,J+1,K))*RDZN(K)+
     .       .5*(W(I+1,J,K)-W(I,J,K)+W(I+1,J+1,K)-W(I,J+1,K))*RDXN(I)
      IF (IND.EQ.26)
     .ZSTR = .5*(V(I+1,J,K)-V(I,J,K)+V(I+1,J,K+1)-V(I,J,K+1))*RDXN(I)+
     .       .5*(U(I,J+1,K)-U(I,J,K)+U(I,J+1,K+1)-U(I,J,K+1))*RDYN(J)
C
      IF (IND.EQ.27)
     .XVOR = .5*(W(I,J+1,K)-W(I,J,K)+W(I+1,J+1,K)-W(I+1,J,K))*RDYN(J)-
     .       .5*(V(I,J,K+1)-V(I,J,K)+V(I+1,J,K+1)-V(I+1,J,K))*RDZN(K)
      IF (IND.EQ.28)
     .YVOR = .5*(U(I,J,K+1)-U(I,J,K)+U(I,J+1,K+1)-U(I,J+1,K))*RDZN(K)-
     .       .5*(W(I+1,J,K)-W(I,J,K)+W(I+1,J+1,K)-W(I,J+1,K))*RDXN(I)
      IF (IND.EQ.29)
     .ZVOR = .5*(V(I+1,J,K)-V(I,J,K)+V(I+1,J,K+1)-V(I,J,K+1))*RDXN(I)-
     .       .5*(U(I,J+1,K)-U(I,J,K)+U(I,J+1,K+1)-U(I,J,K+1))*RDYN(J)
C
      IF (IND.EQ.31) WFA = CORNER_VALUE(WFX,B,S,0.0_EB)
      IF (IND.EQ.32) WFA = CORNER_VALUE(WFY,B,S,0.0_EB)
      IF (IND.EQ.33) WFA = CORNER_VALUE(WFZ,B,S,0.0_EB)
      IF (IND.EQ.34) WFA = CORNER_VALUE(AVG_DROP_RAD,B,S,0.0_EB)
      IF (IND.EQ.37) WFA = CORNER_VALUE(AVG_DROP_TMP,B,S,TMPM)
C
      IF ((IND.GE.41  .AND. IND.LE.50) .OR. 
     .    (IND.GE.141 .AND. IND.LE.150)) THEN
         YYHAT = CORNER_VALUE(YY(:,:,:,IFUEL),B,S,YY0(IFUEL))
         YYHAT = MIN(1._EB,MAX(0._EB,YYHAT))
         IYY1  = FLOOR(YYHAT*10000.)
         IFAC  = YYHAT*10000. - IYY1
         IYY2  = MIN(10000,IYY1+1)
         RSUM_TOTAL = CORNER_VALUE(RSUM,B,S,RSUM0)
         Y_EXTRA = 0.
         DO NN=1,NSPEC
         IF (NN.NE.IFUEL) Y_EXTRA = Y_EXTRA + YY(I,J,K,NN)
         ENDDO 
         ENDIF
C
      IF (IND.GT.50 .AND. IND.LT.90 .AND. NSPEC.GT.0) THEN
      IF (IND.GE.51 .AND. IND.LE.55) NN = IND-50
      IF (IND.GE.61 .AND. IND.LE.65) NN = IND-60
      IF (IND.GE.71 .AND. IND.LE.75) NN = IND-70
      IF (IND.GE.81 .AND. IND.LE.85) NN = IND-80
      YYHAT = CORNER_VALUE(YY(:,:,:,NN),B,S,YY0(NN))
      ENDIF
C
      IF (IND.GE.91 .AND. IND.LE.95 .AND. NSPEC.GT.0) THEN
      NN = IND-90
      YYHAT = CORNER_VALUE(YYP,B,S,YY0(NN)/RSUM0)
      ENDIF
C
      IF (IND.EQ.105) ZZZ = 0.25*(Z_INT(I,J)+Z_INT(I+1,J)+
     .                            Z_INT(I,J+1)+Z_INT(I+1,J+1))
      IF (IND.EQ.106) ZZZ = 0.25*(TMP_UP(I,J)+TMP_UP(I+1,J)+
     .                            TMP_UP(I,J+1)+TMP_UP(I+1,J+1))-TMPM
      IF (IND.EQ.107) ZZZ = 0.25*(TMP_LOW(I,J)+TMP_LOW(I+1,J)+
     .                            TMP_LOW(I,J+1)+TMP_LOW(I+1,J+1))-TMPM
      IF (IND.EQ.108) ZZZ = 0.25*(KAP_UP(I,J)+KAP_UP(I+1,J)+
     .                            KAP_UP(I,J+1)+KAP_UP(I+1,J+1))
      IF (IND.EQ.109) ZZZ = 0.25*(RAD_UP(I,J)+RAD_UP(I+1,J)+
     .                            RAD_UP(I,J+1)+RAD_UP(I+1,J+1))*0.001
C
      SELECT CASE(IND)
      CASE DEFAULT  
                 QQ(I,J,K,IQ) = 0.
      CASE( 1) ; QQ(I,J,K,IQ) = DENS
      CASE( 2) ; QQ(I,J,K,IQ) = UU*DENS
      CASE( 3) ; QQ(I,J,K,IQ) = VV*DENS
      CASE( 4) ; QQ(I,J,K,IQ) = WW*DENS
      CASE( 5) ; QQ(I,J,K,IQ) = TMP_G-TMPM
      CASE( 6) ; QQ(I,J,K,IQ) = UU
      CASE( 7) ; QQ(I,J,K,IQ) = VV
      CASE( 8) ; QQ(I,J,K,IQ) = WW
      CASE( 9) ; QQ(I,J,K,IQ) = P0 + RHO_AVG*(HAVG-.5*VEL2) - PINF
      CASE(10) ; QQ(I,J,K,IQ) = SQRT(VEL2)
      CASE(11) ; QQ(I,J,K,IQ) = QDIM*0.001
      CASE(12) ; QQ(I,J,K,IQ) = HAVG
      CASE(13) ; QQ(I,J,K,IQ) = NUINT
      CASE(14) ; QQ(I,J,K,IQ) = DDD
      CASE(15) ; QQ(I,J,K,IQ) = WDINT
      CASE(16) ; QQ(I,J,K,IQ) = XKAP
      CASE(17) ; QQ(I,J,K,IQ) = MUINT
      CASE(18) ; QQ(I,J,K,IQ) = UIIINT*0.001
      CASE(19) ; QQ(I,J,K,IQ) = QDIM*0.001
      CASE(38) ; QQ(I,J,K,IQ) = QDIM*0.001
      CASE(24) ; QQ(I,J,K,IQ) = XSTR
      CASE(25) ; QQ(I,J,K,IQ) = YSTR
      CASE(26) ; QQ(I,J,K,IQ) = ZSTR
      CASE(27) ; QQ(I,J,K,IQ) = XVOR
      CASE(28) ; QQ(I,J,K,IQ) = YVOR
      CASE(29) ; QQ(I,J,K,IQ) = ZVOR
      CASE(31:33) ; QQ(I,J,K,IQ) = WFA
      CASE(34) ; QQ(I,J,K,IQ) = 2.E6*WFA
      CASE(37) ; QQ(I,J,K,IQ) = WFA - TMPM
      CASE(41:45) 
         Y_STATE_INT  = (1.-IFAC)*Y_STATE(IYY1,IND-40) +
     .                      IFAC *Y_STATE(IYY2,IND-40)
         QQ(I,J,K,IQ) = RCON_STATE(IND-40)*Y_STATE_INT*
     .                  (1.-Y_EXTRA)/RSUM_TOTAL
      CASE(46) 
         Y_STATE_INT  = (1.-IFAC)*Y_STATE(IYY1,6) +
     .                      IFAC *Y_STATE(IYY2,6)
         QQ(I,J,K,IQ) = RCON_STATE(6)*Y_STATE_INT*
     .                  (1.-Y_EXTRA)*1.E6/RSUM_TOTAL
      CASE(47) 
         Y_STATE_INT  = (1.-IFAC)*Y_STATE(IYY1,7) +
     .                      IFAC *Y_STATE(IYY2,7)
         QQ(I,J,K,IQ) = RCON_STATE(7)*Y_STATE_INT*
     .          (1.-Y_EXTRA)*1.E6/RSUM_TOTAL
      CASE(141:147) 
         Y_STATE_INT  = (1.-IFAC)*Y_STATE(IYY1,IND-140) +
     .                      IFAC *Y_STATE(IYY2,IND-140)
         QQ(I,J,K,IQ) = Y_STATE_INT*(1.-Y_EXTRA)
      CASE(48)  
         Y_STATE_INT  = (1.-IFAC)*Y_STATE(IYY1,8) +
     .                      IFAC *Y_STATE(IYY2,8)
         QQ(I,J,K,IQ) = Y_STATE_INT*DENS*(1.-Y_EXTRA)*1.E6/RHO_SOOT
      CASE(148) 
         Y_STATE_INT  = (1.-IFAC)*Y_STATE(IYY1,8) +
     .                      IFAC *Y_STATE(IYY2,8)
         QQ(I,J,K,IQ) = Y_STATE_INT*DENS*(1.-Y_EXTRA)*1.E6
      CASE(49)  
         Y_STATE_INT  = (1.-IFAC)*Y_STATE(IYY1,8) +
     .                      IFAC *Y_STATE(IYY2,8)
         QQ(I,J,K,IQ) = Y_STATE_INT*
     .                  DENS*(1.-Y_EXTRA)*MASS_EXTINCTION_COEFFICIENT
      CASE(50)   
         Y_STATE_INT  = (1.-IFAC)*Y_STATE(IYY1,8) +
     .                      IFAC *Y_STATE(IYY2,8)
         EXT_COEF = Y_STATE_INT*DENS*(1.-Y_EXTRA)*
     .              MASS_EXTINCTION_COEFFICIENT
         QQ(I,J,K,IQ) = VISIBILITY_FACTOR/MAX(EC_LL,EXT_COEF)
      CASE(51:55) ; QQ(I,J,K,IQ) = YYHAT
      CASE(61:65) ; QQ(I,J,K,IQ) = UU*DENS*YYHAT
      CASE(71:75) ; QQ(I,J,K,IQ) = VV*DENS*YYHAT
      CASE(81:85) ; QQ(I,J,K,IQ) = WW*DENS*YYHAT
      CASE(91:95) ; QQ(I,J,K,IQ) = YYHAT*RCON(IND-90)
      CASE(105:109) ; QQ(I,J,K,IQ) = ZZZ
      END SELECT
C
      ENDDO
      ENDDO
      ENDDO
C
      ENDDO QUAN_LOOP
C
C Process slice file
C
      IF (IFRMT.EQ.0) THEN
      LUSF = 3000+100*NM + N
      STIME = T
      WRITE(LUSF) STIME
      WRITE(LUSF) (((QQ(I,J,K,1),I=I1,I2),J=J1,J2),K=K1,K2)
      ENDIF 
C
      ENDDO SLICE_LOOP
C
C Write out the PLOT3D ``q'' file
C
      IF (IFRMT.EQ.1) THEN
      WRITE(LU14) IBP1,JBP1,KBP1
      WRITE(LU14) ZERO,ZERO,ZERO,ZERO
      WRITE(LU14)
     .         ((((QQ(I,J,K,N),I=0,IBAR),J=0,JBAR),K=0,KBAR),N=1,5)
      CLOSE(LU14)
      ENDIF
C
      TUSED(7,NM) = TUSED(7,NM) + SECOND() - TNOW
C 
      CONTAINS
C
C
      REAL(EB) FUNCTION CORNER_VALUE(A,B,S,DEFAULT_VALUE)
C
      REAL(EB), INTENT(IN), DIMENSION(0:,0:,0:) :: A,B,S
      REAL(EB), INTENT(IN) :: DEFAULT_VALUE
C
      IF (S(I,J,K).EQ.0.) THEN
      CORNER_VALUE = DEFAULT_VALUE
      ELSE
      CORNER_VALUE = S(I,J,K)*(A(I,J,K)*B(I,J,K)+
     .                         A(I+1,J,K)*B(I+1,J,K)+
     .                         A(I,J,K+1)*B(I,J,K+1)+
     .                         A(I+1,J,K+1)*B(I+1,J,K+1)+
     .                         A(I,J+1,K)*B(I,J+1,K)+
     .                         A(I+1,J+1,K)*B(I+1,J+1,K)+
     .                         A(I,J+1,K+1)*B(I,J+1,K+1)+
     .                         A(I+1,J+1,K+1)*B(I+1,J+1,K+1))
      ENDIF
C
      END FUNCTION CORNER_VALUE
C
C
      REAL(EB) FUNCTION FACE_VALUE(A,B,S,DEFAULT_VALUE,IOR)
C
      REAL(EB), INTENT(IN), DIMENSION(0:,0:,0:) :: A,B,S
      REAL(EB), INTENT(IN) :: DEFAULT_VALUE
      INTEGER, INTENT(IN) :: IOR
C
      IF (S(I,J,K).EQ.0.) THEN
      FACE_VALUE = DEFAULT_VALUE
      ELSE
      SELECT CASE(IOR)
      CASE(1)
      FACE_VALUE = S(I,J,K)*(A(I,J,K)*B(I,J,K)+
     .                       A(I,J,K)*B(I+1,J,K)+
     .                       A(I,J,K+1)*B(I,J,K+1)+
     .                       A(I,J,K+1)*B(I+1,J,K+1)+
     .                       A(I,J+1,K)*B(I,J+1,K)+
     .                       A(I,J+1,K)*B(I+1,J+1,K)+
     .                       A(I,J+1,K+1)*B(I,J+1,K+1)+
     .                       A(I,J+1,K+1)*B(I+1,J+1,K+1))
      CASE(2)
      FACE_VALUE = S(I,J,K)*(A(I,J,K)*B(I,J,K)+
     .                       A(I+1,J,K)*B(I+1,J,K)+
     .                       A(I,J,K+1)*B(I,J,K+1)+
     .                       A(I+1,J,K+1)*B(I+1,J,K+1)+
     .                       A(I,J,K)*B(I,J+1,K)+
     .                       A(I+1,J,K)*B(I+1,J+1,K)+
     .                       A(I,J,K+1)*B(I,J+1,K+1)+
     .                       A(I+1,J,K+1)*B(I+1,J+1,K+1))
      CASE(3)
      FACE_VALUE = S(I,J,K)*(A(I,J,K)*B(I,J,K)+
     .                       A(I+1,J,K)*B(I+1,J,K)+
     .                       A(I,J,K)*B(I,J,K+1)+
     .                       A(I+1,J,K)*B(I+1,J,K+1)+
     .                       A(I,J+1,K)*B(I,J+1,K)+
     .                       A(I+1,J+1,K)*B(I+1,J+1,K)+
     .                       A(I,J+1,K)*B(I,J+1,K+1)+
     .                       A(I+1,J+1,K)*B(I+1,J+1,K+1))
      END SELECT
      ENDIF
C
      END FUNCTION FACE_VALUE
C
      END SUBROUTINE DUMP_SF
C
C
      SUBROUTINE UPDATE_TC(NM)
C
C Record thermocouple temperatures
C
      REAL(EB) FLOW,HMFAC,DRAD,DTMP,
     .         F1,F2,H_TC,SRAD,TMP_TC,MU_AIR,RE_D,K_AIR,NUSSELT,
     .         NU_FAC,PR,AREA,VEL
      REAL(FB) :: KAPUP,TMPUP,TMPLOW,ZINT,RADUP
      INTEGER :: NM,ITER
C
      TNOW=SECOND()
C
      CALL UNPACK_VAR(NM)
C
      TC_LOOP: DO N=1,NTC
C
      TC => THERMOCOUPLE(N)
      IF (TC%MESH.NE.NM) CYCLE TC_LOOP
C
      IND      = TC%INDEX
      TC%COUNT = TC%COUNT + 1
C
      GAS_OR_SOLID_PHASE: IF (IND.GT.0) THEN    
C
C Compute TC data for gas phase thermocouples
C
      XI = GINV((TC%X-XS),1,NM)*RDXI
      YJ = GINV((TC%Y-YS),2,NM)*RDETA
      ZK = GINV((TC%Z-ZS),3,NM)*RDZETA
      I2 = XI
      I1 = XI + .5
      J2 = YJ
      J1 = YJ + .5
      K2 = ZK
      K1 = ZK + .5
C
      IF (LDATA(IND,1)) THEN
      DENS = AFILL(RHO(I1,J1,K1),    RHO(I1+1,J1,K1),
     .             RHO(I1,J1+1,K1),  RHO(I1+1,J1+1,K1),
     .             RHO(I1,J1,K1+1),  RHO(I1+1,J1,K1+1),
     .             RHO(I1,J1+1,K1+1),RHO(I1+1,J1+1,K1+1),
     .             XI-I1+.5,YJ-J1+.5,ZK-K1+.5)
      ENDIF
C
      IF (IND.EQ.5 .OR. IND.EQ.110) THEN
      TMP_G  = AFILL(TMP(I1,J1,K1),    TMP(I1+1,J1,K1),
     .               TMP(I1,J1+1,K1),  TMP(I1+1,J1+1,K1),
     .               TMP(I1,J1,K1+1),  TMP(I1+1,J1,K1+1),
     .               TMP(I1,J1+1,K1+1),TMP(I1+1,J1+1,K1+1),
     .               XI-I1+.5,YJ-J1+.5,ZK-K1+.5)
      ENDIF
C
      IF (IND.EQ.2 .OR. IND.EQ.6 .OR. IND.EQ.9 .OR. IND.EQ.10 .OR.
     .    (IND.GE.61 .AND. IND.LE.65) ) 
     .UP1 = AFILL(U(I2,J1,K1),U(I2+1,J1,K1),
     .            U(I2,J1+1,K1),U(I2+1,J1+1,K1),
     .            U(I2,J1,K1+1),U(I2+1,J1,K1+1),
     .            U(I2,J1+1,K1+1),U(I2+1,J1+1,K1+1),
     .            XI-I2,YJ-J1+.5,ZK-K1+.5)
 
      IF (IND.EQ.3 .OR. IND.EQ.7 .OR. IND.EQ.9 .OR. IND.EQ.10 .OR.
     .    (IND.GE.71 .AND. IND.LE.75) ) 
     .VP1 = AFILL(V(I1,J2,K1),V(I1+1,J2,K1),
     .            V(I1,J2+1,K1),V(I1+1,J2+1,K1),
     .            V(I1,J2,K1+1),V(I1+1,J2,K1+1),
     .            V(I1,J2+1,K1+1),V(I1+1,J2+1,K1+1),
     .            XI-I1+.5,YJ-J2,ZK-K1+.5)
C
      IF (IND.EQ.4 .OR. IND.EQ.8 .OR. IND.EQ.9 .OR. IND.EQ.10 .OR.
     .    (IND.GE.81 .AND. IND.LE.85) ) 
     .WP1 = AFILL(W(I1,J1,K2),W(I1+1,J1,K2),
     .            W(I1,J1+1,K2),W(I1+1,J1+1,K2),
     .            W(I1,J1,K2+1),W(I1+1,J1,K2+1),
     .            W(I1,J1+1,K2+1),W(I1+1,J1+1,K2+1),
     .            XI-I1+.5,YJ-J1+.5,ZK-K2)
 
      IF (IND.EQ.9 .OR. IND.EQ.10 .OR. IND.EQ.110) 
     .   VEL2 = UP1**2+VP1**2+WP1**2
C
      IF (IND.EQ.9 .OR. IND.EQ.12)
     .HAVG = AFILL(H(I1,J1,K1),    H(I1+1,J1,K1),
     .             H(I1,J1+1,K1),  H(I1+1,J1+1,K1),
     .             H(I1,J1,K1+1),  H(I1+1,J1,K1+1),
     .             H(I1,J1+1,K1+1),H(I1+1,J1+1,K1+1),
     .             XI-I1+.5,YJ-J1+.5,ZK-K1+.5)
C
      IF (IND.EQ.11) 
     .QQQ  = AFILL(Q(I1,J1,K1),    Q(I1+1,J1,K1),
     .             Q(I1,J1+1,K1),  Q(I1+1,J1+1,K1),
     .             Q(I1,J1,K1+1),  Q(I1+1,J1,K1+1),
     .             Q(I1,J1+1,K1+1),Q(I1+1,J1+1,K1+1),
     .             XI-I1+.5,YJ-J1+.5,ZK-K1+.5)
C
      IF (IND.EQ.13) 
     .NUINT = AFILL(MU(I1,J1,K1)/RHO(I1,J1,K1),    
     .              MU(I1+1,J1,K1)/RHO(I1+1,J1,K1),
     .              MU(I1,J1+1,K1)/RHO(I1,J1+1,K1),  
     .              MU(I1+1,J1+1,K1)/RHO(I1+1,J1+1,K1),
     .              MU(I1,J1,K1+1)/RHO(I1,J1,K1+1),  
     .              MU(I1+1,J1,K1+1)/RHO(I1+1,J1,K1+1),
     .              MU(I1,J1+1,K1+1)/RHO(I1,J1+1,K1+1),
     .              MU(I1+1,J1+1,K1+1)/RHO(I1+1,J1+1,K1+1),
     .              XI-I1+.5,YJ-J1+.5,ZK-K1+.5)
C
      IF (IND.EQ.17)
     .MUINT = AFILL(MU(I1,J1,K1),MU(I1+1,J1,K1),MU(I1,J1+1,K1),
     .              MU(I1+1,J1+1,K1),MU(I1,J1,K1+1),MU(I1+1,J1,K1+1),
     .              MU(I1,J1+1,K1+1),MU(I1+1,J1+1,K1+1),
     .              XI-I1+.5,YJ-J1+.5,ZK-K1+.5)
C
      IF (IND.EQ.18 .OR. IND.EQ.110)
     .UIIINT = AFILL(UII(I1,J1,K1),UII(I1+1,J1,K1),UII(I1,J1+1,K1),
     .               UII(I1+1,J1+1,K1),UII(I1,J1,K1+1),
     .               UII(I1+1,J1,K1+1),
     .               UII(I1,J1+1,K1+1),UII(I1+1,J1+1,K1+1),
     .               XI-I1+.5,YJ-J1+.5,ZK-K1+.5)
C
      IF (IND.EQ.19)
     .QQQ  = AFILL(QR(I1,J1,K1),    QR(I1+1,J1,K1),
     .             QR(I1,J1+1,K1),  QR(I1+1,J1+1,K1),
     .             QR(I1,J1,K1+1),  QR(I1+1,J1,K1+1),
     .             QR(I1,J1+1,K1+1),QR(I1+1,J1+1,K1+1),
     .             XI-I1+.5,YJ-J1+.5,ZK-K1+.5)
      IF (IND.EQ.38)
     .QQQ  = AFILL(QR_W(I1,J1,K1),    QR_W(I1+1,J1,K1),
     .             QR_W(I1,J1+1,K1),  QR_W(I1+1,J1+1,K1),
     .             QR_W(I1,J1,K1+1),  QR_W(I1+1,J1,K1+1),
     .             QR_W(I1,J1+1,K1+1),QR_W(I1+1,J1+1,K1+1),
     .             XI-I1+.5,YJ-J1+.5,ZK-K1+.5)
C
      IF (IND.EQ.14)
     .DDD  = AFILL(D(I1,J1,K1),    D(I1+1,J1,K1),
     .             D(I1,J1+1,K1),  D(I1+1,J1+1,K1),
     .             D(I1,J1,K1+1),  D(I1+1,J1,K1+1),
     .             D(I1,J1+1,K1+1),D(I1+1,J1+1,K1+1),
     .             XI-I1+.5,YJ-J1+.5,ZK-K1+.5)
C
      IF (IND.EQ.15) THEN
      WDINT = AFILL(AVG_DROP_DEN(I1,J1,K1),    
     .              AVG_DROP_DEN(I1+1,J1,K1),
     .              AVG_DROP_DEN(I1,J1+1,K1),  
     .              AVG_DROP_DEN(I1+1,J1+1,K1),
     .              AVG_DROP_DEN(I1,J1,K1+1),  
     .              AVG_DROP_DEN(I1+1,J1,K1+1),
     .              AVG_DROP_DEN(I1,J1+1,K1+1),
     .              AVG_DROP_DEN(I1+1,J1+1,K1+1),
     .              XI-I1+.5,YJ-J1+.5,ZK-K1+.5)
      ENDIF
C
      IF (IND.EQ.16)
     .XKAP = AFILL(KAPPA(I1,J1,K1),    KAPPA(I1+1,J1,K1),
     .             KAPPA(I1,J1+1,K1),  KAPPA(I1+1,J1+1,K1),
     .             KAPPA(I1,J1,K1+1),  KAPPA(I1+1,J1,K1+1),
     .             KAPPA(I1,J1+1,K1+1),KAPPA(I1+1,J1+1,K1+1),
     .             XI-I1+.5,YJ-J1+.5,ZK-K1+.5)
C
      IF (IND.EQ.34)
     .DRAD = AFILL(AVG_DROP_RAD(I1,J1,K1),    
     .             AVG_DROP_RAD(I1+1,J1,K1),
     .             AVG_DROP_RAD(I1,J1+1,K1),  
     .             AVG_DROP_RAD(I1+1,J1+1,K1),
     .             AVG_DROP_RAD(I1,J1,K1+1),  
     .             AVG_DROP_RAD(I1+1,J1,K1+1),
     .             AVG_DROP_RAD(I1,J1+1,K1+1),
     .             AVG_DROP_RAD(I1+1,J1+1,K1+1),
     .             XI-I1+.5,YJ-J1+.5,ZK-K1+.5)
C
      IF (IND.EQ.37)
     .DTMP = AFILL(AVG_DROP_TMP(I1,J1,K1),    
     .             AVG_DROP_TMP(I1+1,J1,K1),
     .             AVG_DROP_TMP(I1,J1+1,K1),  
     .             AVG_DROP_TMP(I1+1,J1+1,K1),
     .             AVG_DROP_TMP(I1,J1,K1+1),  
     .             AVG_DROP_TMP(I1+1,J1,K1+1),
     .             AVG_DROP_TMP(I1,J1+1,K1+1),
     .             AVG_DROP_TMP(I1+1,J1+1,K1+1),
     .             XI-I1+.5,YJ-J1+.5,ZK-K1+.5)
C
      IF ((IND.GE.41  .AND. IND.LE. 50) .OR.
     .    (IND.GE.141 .AND. IND.LE.150)) THEN
      ZZ   = AFILL(YY(I1,J1,K1,IFUEL),  YY(I1+1,J1,K1,IFUEL),
     .             YY(I1,J1+1,K1,IFUEL),YY(I1+1,J1+1,K1,IFUEL),
     .             YY(I1,J1,K1+1,IFUEL),YY(I1+1,J1,K1+1,IFUEL),
     .             YY(I1,J1+1,K1+1,IFUEL),YY(I1+1,J1+1,K1+1,IFUEL),
     .             XI-I1+.5,YJ-J1+.5,ZK-K1+.5)
      RSUM_TOTAL = AFILL(RSUM(I1,J1,K1),RSUM(I1+1,J1,K1),
     .             RSUM(I1,J1+1,K1),RSUM(I1+1,J1+1,K1),
     .             RSUM(I1,J1,K1+1),RSUM(I1+1,J1,K1+1),
     .             RSUM(I1,J1+1,K1+1),RSUM(I1+1,J1+1,K1+1),
     .             XI-I1+.5,YJ-J1+.5,ZK-K1+.5)
      ZZ   = MIN(1._EB,MAX(0._EB,ZZ))
      IYY1 = FLOOR(ZZ*10000.)
      IFAC = ZZ*10000. - IYY1
      IYY2 = MIN(10000,IYY1+1)
C
      Y_EXTRA = 0.
      DO NN=1,NSPEC
      IF (NN.NE.IFUEL) Y_EXTRA = Y_EXTRA + YY(I1,J1,K1,NN)
      ENDDO
      ENDIF
C
      IF (IND.GT.50 .AND. IND.LT.90) THEN
      IF (IND.GE.51 .AND. IND.LE.55) NN = IND-50
      IF (IND.GE.61 .AND. IND.LE.65) NN = IND-60
      IF (IND.GE.71 .AND. IND.LE.75) NN = IND-70
      IF (IND.GE.81 .AND. IND.LE.85) NN = IND-80
      ZZ   = AFILL(YY(I1,J1,K1,NN),  YY(I1+1,J1,K1,NN),
     .             YY(I1,J1+1,K1,NN),YY(I1+1,J1+1,K1,NN),
     .             YY(I1,J1,K1+1,NN),YY(I1+1,J1,K1+1,NN),
     .             YY(I1,J1+1,K1+1,NN),YY(I1+1,J1+1,K1+1,NN),
     .             XI-I1+.5,YJ-J1+.5,ZK-K1+.5)
      ENDIF
C
      IF (IND.GE.91 .AND. IND.LE.95) THEN
      NN = IND-90
      ZZ   = AFILL(YY(I1,J1,K1,NN)/RSUM(I1,J1,K1),  
     .             YY(I1+1,J1,K1,NN)/RSUM(I1+1,J1,K1),
     .             YY(I1,J1+1,K1,NN)/RSUM(I1,J1+1,K1),
     .             YY(I1+1,J1+1,K1,NN)/RSUM(I1+1,J1+1,K1),
     .             YY(I1,J1,K1+1,NN)/RSUM(I1,J1,K1+1),
     .             YY(I1+1,J1,K1+1,NN)/RSUM(I1+1,J1,K1+1),
     .             YY(I1,J1+1,K1+1,NN)/RSUM(I1,J1+1,K1+1),
     .             YY(I1+1,J1+1,K1+1,NN)/RSUM(I1+1,J1+1,K1+1),
     .             XI-I1+.5,YJ-J1+.5,ZK-K1+.5)
      ENDIF
C
      IF ( (IND.GE.101 .AND. IND.LE.103) .OR. 
     .     (IND.GE.111 .AND. IND.LE.113) .OR.
     .     (IND.GE.116 .AND. IND.LE.118) ) THEN
      FLOW = 0.
      DO K=TC%K1,TC%K2
      DO J=TC%J1,TC%J2
      DO I=TC%I1,TC%I2
      IF (IND.EQ.101 .OR. IND.EQ.111 .OR. IND.EQ.116) HMFAC = 1.         
      IF (IND.EQ.102 .OR. IND.EQ.112 .OR. IND.EQ.117) HMFAC = RHO(I,J,K)
      IF (IND.EQ.103 .OR. IND.EQ.113 .OR. IND.EQ.118) 
     .    HMFAC = RHO(I,J,K)*CP_GAMMA*(TMP(I,J,K)-TMPA)
      SELECT CASE(TC%IOR)
      CASE(1) ; VEL = U(I,J,K) ; AREA = DY(J)*DZ(K)*RC(I)
      CASE(2) ; VEL = V(I,J,K) ; AREA = DX(I)*DZ(K)
      CASE(3) ; VEL = W(I,J,K) ; AREA = DX(I)*DY(J)*RC(I)
      END SELECT
      SELECT CASE(IND)
      CASE(101:103) ; FLOW = FLOW + VEL*HMFAC*AREA
      CASE(111:113) ; FLOW = FLOW + MAX(0._EB,VEL)*HMFAC*AREA
      CASE(116:118) ; FLOW = FLOW - MIN(0._EB,VEL)*HMFAC*AREA
      END SELECT
      ENDDO
      ENDDO
      ENDDO
      ENDIF
C
      IF (IND.EQ.104) THEN
      FLOW = 0.
      DO K=TC%K1,TC%K2
      DO J=TC%J1,TC%J2
      DO I=TC%I1,TC%I2
      FLOW = FLOW + Q(I,J,K)*DX(I)*RC(I)*DY(J)*DZ(K)
      ENDDO
      ENDDO
      ENDDO
      ENDIF
C
      IF (IND.GE.105 .AND. IND.LE.109) THEN
      CALL GET_LAYER_HEIGHT(I2+1,J2+1,TC%K_LOW,TC%K_HIGH,
     .                      ZINT,TMPUP,TMPLOW,KAPUP,RADUP)
      ENDIF
C
      IF (IND.EQ.110) THEN  ! do a simulated thermocouple
      PR      = 0.7
      MU_AIR  = MU_SPEC(0,MIN(500,NINT(0.1*TMP_G)))
      RE_D    = DENS*SQRT(VEL2)*TC%DIAMETER/MU_AIR
      NU_FAC  = 0.6*PR**ONTH
      K_AIR   = CPOPR*MU_AIR
      NUSSELT = 2. + NU_FAC*SQRT(RE_D)
      H_TC    = NUSSELT*K_AIR/TC%DIAMETER
      SRAD    = 0.25*TC%EMISSIVITY*UIIINT + H_TC*TMP_G
      TMP_TC  = 0.95*TMP_G
      DO ITER=1,10
      F1 =    TC%EMISSIVITY*SIGMA*TMP_TC**4 + H_TC*TMP_TC - SRAD
      F2 = 4.*TC%EMISSIVITY*SIGMA*TMP_TC**3 + H_TC
      TMP_TC = TMP_TC - F1/F2
      ENDDO
      ENDIF
C
      SELECT CASE(IND)
      CASE DEFAULT; TC%VALUE = 0.
      CASE( 1)    ; TC%VALUE = TC%VALUE + DENS
      CASE( 2)    ; TC%VALUE = TC%VALUE + UP1*DENS
      CASE( 3)    ; TC%VALUE = TC%VALUE + VP1*DENS
      CASE( 4)    ; TC%VALUE = TC%VALUE + WP1*DENS
      CASE( 5)    ; TC%VALUE = TC%VALUE + TMP_G-TMPM
      CASE( 6)    ; TC%VALUE = TC%VALUE + UP1
      CASE( 7)    ; TC%VALUE = TC%VALUE + VP1
      CASE( 8)    ; TC%VALUE = TC%VALUE + WP1
      CASE( 9)    ; TC%VALUE = TC%VALUE + 
     .                         P0 + RHO_AVG*(HAVG-.5*VEL2) - PINF
      CASE(10)    ; TC%VALUE = TC%VALUE + SQRT(VEL2)
      CASE(11)    ; TC%VALUE = TC%VALUE + QQQ*0.001
      CASE(12)    ; TC%VALUE = TC%VALUE + HAVG
      CASE(13)    ; TC%VALUE = TC%VALUE + NUINT
      CASE(14)    ; TC%VALUE = TC%VALUE + DDD
      CASE(15)    ; TC%VALUE = TC%VALUE + WDINT
      CASE(16)    ; TC%VALUE = TC%VALUE + XKAP
      CASE(17)    ; TC%VALUE = TC%VALUE + MUINT
      CASE(18)    ; TC%VALUE = TC%VALUE + UIIINT*0.001
      CASE(19)    ; TC%VALUE = TC%VALUE + QQQ*0.001
      CASE(38)    ; TC%VALUE = TC%VALUE + QQQ*0.001
      CASE(34)    ; TC%VALUE = TC%VALUE + 2.E6*DRAD
      CASE(37)    ; TC%VALUE = TC%VALUE + DTMP-TMPM
      CASE(41:45) 
        Y_STATE_INT = (1.-IFAC)*Y_STATE(IYY1,IND-40) +
     .                    IFAC *Y_STATE(IYY2,IND-40)
        TC%VALUE = TC%VALUE + RCON_STATE(IND-40)*Y_STATE_INT*
     .                  (1.-Y_EXTRA)/RSUM_TOTAL
      CASE(46:47) 
        Y_STATE_INT = (1.-IFAC)*Y_STATE(IYY1,IND-40) +
     .                    IFAC *Y_STATE(IYY2,IND-40)
        TC%VALUE = TC%VALUE + 1.E6*
     .  RCON_STATE(IND-40)*Y_STATE_INT*(1.-Y_EXTRA)/RSUM_TOTAL
      CASE(141:147) 
        Y_STATE_INT = (1.-IFAC)*Y_STATE(IYY1,IND-140) +
     .                    IFAC *Y_STATE(IYY2,IND-140)
        TC%VALUE = TC%VALUE + Y_STATE_INT*(1.-Y_EXTRA)
      CASE(48)  
        Y_STATE_INT = (1.-IFAC)*Y_STATE(IYY1,8) +
     .                    IFAC *Y_STATE(IYY2,8)
        TC%VALUE = TC%VALUE + Y_STATE_INT*DENS*1.E6*
     .                        (1.-Y_EXTRA)/RHO_SOOT
      CASE(148) 
        Y_STATE_INT = (1.-IFAC)*Y_STATE(IYY1,8) +
     .                    IFAC *Y_STATE(IYY2,8)
        TC%VALUE = TC%VALUE + Y_STATE_INT*DENS*(1.-Y_EXTRA)*1.E6
      CASE(49)  
        Y_STATE_INT = (1.-IFAC)*Y_STATE(IYY1,8) +
     .                    IFAC *Y_STATE(IYY2,8)
        TC%VALUE = TC%VALUE + Y_STATE_INT*DENS*
     .                  (1.-Y_EXTRA)*MASS_EXTINCTION_COEFFICIENT
      CASE(50)     
        Y_STATE_INT = (1.-IFAC)*Y_STATE(IYY1,8) +
     .                    IFAC *Y_STATE(IYY2,8)
        EXT_COEF = Y_STATE_INT*DENS*(1.-Y_EXTRA)*
     .             MASS_EXTINCTION_COEFFICIENT
        TC%VALUE = TC%VALUE + VISIBILITY_FACTOR/MAX(EC_LL,EXT_COEF)
      CASE(51:55) ; TC%VALUE = TC%VALUE + ZZ
      CASE(61:65) ; TC%VALUE = TC%VALUE + UP1*DENS*ZZ
      CASE(71:75) ; TC%VALUE = TC%VALUE + VP1*DENS*ZZ
      CASE(81:85) ; TC%VALUE = TC%VALUE + WP1*DENS*ZZ
      CASE(91:95) ; TC%VALUE = TC%VALUE + ZZ*RCON(IND-90)
      CASE(101)   ; TC%VALUE = TC%VALUE + FLOW
      CASE(102)   ; TC%VALUE = TC%VALUE + FLOW
      CASE(103)   ; TC%VALUE = TC%VALUE + FLOW*0.001
      CASE(104)   ; TC%VALUE = TC%VALUE + FLOW*0.001
      CASE(105)   ; TC%VALUE = TC%VALUE + ZINT
      CASE(106)   ; TC%VALUE = TC%VALUE + TMPUP -TMPM
      CASE(107)   ; TC%VALUE = TC%VALUE + TMPLOW-TMPM
      CASE(108)   ; TC%VALUE = TC%VALUE + KAPUP
      CASE(109)   ; TC%VALUE = TC%VALUE + RADUP*0.001
      CASE(110)   ; TC%VALUE = TC%VALUE + TMP_TC-TMPM
      CASE(111)   ; TC%VALUE = TC%VALUE + FLOW
      CASE(112)   ; TC%VALUE = TC%VALUE + FLOW
      CASE(113)   ; TC%VALUE = TC%VALUE + FLOW*0.001
      CASE(116)   ; TC%VALUE = TC%VALUE + FLOW
      CASE(117)   ; TC%VALUE = TC%VALUE + FLOW
      CASE(118)   ; TC%VALUE = TC%VALUE + FLOW*0.001
      END SELECT
C
      ELSE  ! Solid Phase Quantities
C
C Compute TC data for surfaces
C
      TC%VALUE = TC%VALUE + TCW(TC%IW,ABS(IND),N)
C
      ENDIF GAS_OR_SOLID_PHASE
C
      ENDDO TC_LOOP
C
      TUSED(7,NM) = TUSED(7,NM) + SECOND() - TNOW
      END SUBROUTINE UPDATE_TC
C
C 
      SUBROUTINE DUMP_TC(T)
C
C Write out to CHID.tc the thermocouple data every DTTC
C
      REAL(EB), INTENT(IN) :: T
C
      WRITE(TCFORM,'(A,I4.4,A)') "(",NTC,"(ES13.5E3,','),ES13.5E3)"
      WRITE(LU11,TCFORM) T,(THERMOCOUPLE(N)%VALUE/
     .                      REAL(THERMOCOUPLE(N)%COUNT,EB),N=1,NTC)
C
      TUSED(7,1) = TUSED(7,1) + SECOND() - TNOW
      END SUBROUTINE DUMP_TC
C
C
      SUBROUTINE DUMP_DETECTORS(T,TYPE_CODE)
C
C Write out sprinkler link and heat detector temps to files
C
      REAL(EB) T
      INTEGER, INTENT(IN) :: TYPE_CODE
C
      SELECT CASE(TYPE_CODE)
C
      CASE(1)
      WRITE(TCFORM,'(A,I4.4,A)') "(",NSPR,"(ES13.5E3,','),ES13.5E3)"
      WRITE(LU12,TCFORM) T,(SPRINKLER_HEAD(N)%TMP_L-TMPM,N=1,NSPR)
C
      CASE(2)
      WRITE(TCFORM,'(A,I4.4,A)') "(",MIN(255,NHD),
     .                           "(ES13.5E3,','),ES13.5E3)"
      WRITE(LU15,TCFORM) T,(HEAT_DETECTOR(N)%TMP_L-TMPM,N=1,NHD)
C
      CASE(3) 
      WRITE(TCFORM,'(A,I4.4,A)') "(",NSD,"(ES13.5E3,','),ES13.5E3)"
      WRITE(LU111,TCFORM) T,(SMOKE_DETECTOR(N)%YSMOKE_IN,N=1,NSD)
C
      END SELECT
C
      TUSED(7,1) = TUSED(7,1) + SECOND() - TNOW
      END SUBROUTINE DUMP_DETECTORS
C
C
      SUBROUTINE UPDATE_HRR(NM)
C
C Compute the total heat release rate and the radiative loss part.
C
      REAL(EB) VC,TMP_N,RHO_N,U_N
      INTEGER, INTENT(IN) :: NM
      INTEGER IOR
C
      TNOW=SECOND()
C
      HRR(NM)  = 0.
      RHRR(NM) = 0.
      CHRR(NM) = 0.
      FHRR(NM) = 0.
      MLR(NM)  = 0.
C
      CALL UNPACK_VAR(NM)
C
      DO K=1,KBAR
      DO J=1,JBAR
      ILOOP2: DO I=1,IBAR
      IF (SOLID(ICA(I,J,K))) CYCLE ILOOP2
      IF (NM.GT.1) THEN
      IF (INTERPOLATED_MESH(I,J,K).GT.0) CYCLE ILOOP2
      ENDIF
      VC = DX(I)*RC(I)*DY(J)*DZ(K)
      HRR(NM)  = HRR(NM)  + Q(I,J,K)*VC
      RHRR(NM) = RHRR(NM) + QR(I,J,K)*VC
      ENDDO ILOOP2
      ENDDO
      ENDDO
C
      WALL_LOOP: DO IW=1,NWC
      IF (IV(IW).NE.1 .AND. IV(IW).NE.2) CYCLE WALL_LOOP
      IIG = IJKW(6,IW)
      JJG = IJKW(7,IW)
      KKG = IJKW(8,IW)
      IF (NM.GT.1) THEN
      IF (INTERPOLATED_MESH(IIG,JJG,KKG).GT.0) CYCLE WALL_LOOP
      ENDIF
      IOR = IJKW(4,IW)
      TMP_N = 0.5*(TMP_W(IW)+TMP(IIG,JJG,KKG))
      RHO_N = 0.5*(RHO_W(IW)+RHO(IIG,JJG,KKG))
      SELECT CASE(IOR)
      CASE( 1) ; U_N = -U(IIG-1,JJG,KKG)
      CASE(-1) ; U_N =  U(IIG,JJG,KKG)
      CASE( 2) ; U_N = -V(IIG,JJG-1,KKG)
      CASE(-2) ; U_N =  V(IIG,JJG,KKG)
      CASE( 3) ; U_N = -W(IIG,JJG,KKG-1)
      CASE(-3) ; U_N =  W(IIG,JJG,KKG)
      END SELECT
      IF (IV(IW).EQ.1)
     .CHRR(NM) = CHRR(NM) - (QCONF(IW)+QRAD(IW))*AW(IW)
      FHRR(NM) = FHRR(NM) - U_N*RHO_N*CP_GAMMA*(TMP_N-TMPA)*AW(IW)
      IF (IV(IW).EQ.2)
     .FHRR(NM) = FHRR(NM) - QRAD(IW)*AW(IW)
      MLR(NM)  = MLR(NM)  + MASSFLUX(IW,IFUEL)*AW(IW)
      ENDDO WALL_LOOP
C
      HRR_SUM(NM)  = HRR_SUM(NM)  + HRR(NM)
      RHRR_SUM(NM) = RHRR_SUM(NM) + RHRR(NM)
      CHRR_SUM(NM) = CHRR_SUM(NM) + CHRR(NM)
      FHRR_SUM(NM) = FHRR_SUM(NM) + FHRR(NM)
      MLR_SUM(NM)  = MLR_SUM(NM)  + MLR(NM)
      HRR_COUNT(NM)= HRR_COUNT(NM)+ 1.
C
      TUSED(7,NM) = TUSED(7,NM) + SECOND() - TNOW
      END SUBROUTINE UPDATE_HRR
C
C
      SUBROUTINE DUMP_HRR(T)
C
C Record HRR, etc, in the file CHID_hrr.csv
C
      REAL(EB), INTENT(IN) :: T
      INTEGER NM
      REAL(EB) HRR_TOTAL,RHRR_TOTAL,CHRR_TOTAL,FHRR_TOTAL,MLR_TOTAL
C
      HRR_TOTAL  = 0.
      RHRR_TOTAL = 0.
      CHRR_TOTAL = 0.
      FHRR_TOTAL = 0.
      MLR_TOTAL  = 0.
C
      DO NM=1,NMESHES
      IF (HRR_COUNT(NM).GT.0.) THEN
      HRR_TOTAL  = HRR_TOTAL  + HRR_SUM(NM)/HRR_COUNT(NM)
      RHRR_TOTAL = RHRR_TOTAL + RHRR_SUM(NM)/HRR_COUNT(NM)
      CHRR_TOTAL = CHRR_TOTAL + CHRR_SUM(NM)/HRR_COUNT(NM)
      FHRR_TOTAL = FHRR_TOTAL + FHRR_SUM(NM)/HRR_COUNT(NM)
      MLR_TOTAL  = MLR_TOTAL  + MLR_SUM(NM)/HRR_COUNT(NM)
      ENDIF
      ENDDO
C
      WRITE(TCFORM,'(A,I4.4,A)') "(",5,"(ES13.5E3,','),ES13.5E3)"
      WRITE(LU18,TCFORM) T,0.001*HRR_TOTAL, -.001*RHRR_TOTAL,
     .                     -.001*FHRR_TOTAL,-.001*CHRR_TOTAL,
     .                           MLR_TOTAL
C
      TUSED(7,1) = TUSED(7,1) + SECOND() - TNOW
      END SUBROUTINE DUMP_HRR
C
C
      SUBROUTINE UPDATE_MASS(NM)
C
C Compute the total masses of various gases
C
      REAL(EB) VC
      INTEGER, INTENT(IN) :: NM
      INTEGER IYY
C
      TNOW=SECOND()
C
      MINT(:,NM) = 0.
C
      CALL UNPACK_VAR(NM)
C
      DO K=1,KBAR
      DO J=1,JBAR
      ILOOP: DO I=1,IBAR
      IF (SOLID(ICA(I,J,K))) CYCLE ILOOP
      IF (NM.GT.1) THEN
         IF (INTERPOLATED_MESH(I,J,K).NE.0) CYCLE ILOOP
         ENDIF
      VC = DX(I)*RC(I)*DY(J)*DZ(K)
      IF (MIXTURE_FRACTION) THEN
         Y_EXTRA = 0.
         NN = 8
         DO N=1,NSPEC
         IF (N.NE.IFUEL) THEN
            NN = NN+1
            MINT(NN,NM) = MINT(NN,NM) + YY(I,J,K,N)*VC*RHO(I,J,K)
            Y_EXTRA  = Y_EXTRA  + YY(I,J,K,N)
            ENDIF
         ENDDO
         IYY = MAX(0,NINT(YY(I,J,K,IFUEL)*10000.))
         IYY = MIN(10000,IYY)
         MINT(0,NM) = MINT(0,NM) + VC*RHO(I,J,K)
         DO N=1,8
         MINT(N,NM) = MINT(N,NM) + 
     .                (1.-Y_EXTRA)*Y_STATE(IYY,N)*VC*RHO(I,J,K)
         ENDDO
      ELSE  ! No Mixture Fraction Model
         MINT(0,NM) = MINT(0,NM) + VC*RHO(I,J,K)
         DO N=1,NSPEC
         MINT(N,NM) = MINT(N,NM) + YY(I,J,K,N)*VC*RHO(I,J,K)
         ENDDO
      ENDIF
      ENDDO ILOOP
      ENDDO
      ENDDO
C
      MINT_SUM(:,NM) = MINT_SUM(:,NM) + MINT(:,NM)
      MINT_COUNT(NM) = MINT_COUNT(NM) + 1.
C
      TUSED(7,NM) = TUSED(7,NM) + SECOND() - TNOW
      END SUBROUTINE UPDATE_MASS
C
C
      SUBROUTINE DUMP_MASS(T)
C
      REAL(EB), INTENT(IN) :: T
      REAL(EB) MINT_TOTAL(0:20)
      INTEGER NM
C
      MINT_TOTAL(:) = 0.
      DO NM=1,NMESHES
      IF (MINT_COUNT(NM).GT.0.)
     .MINT_TOTAL(:) = MINT_TOTAL(:) + MINT_SUM(:,NM)/MINT_COUNT(NM)
      ENDDO
C
      IF (MIXTURE_FRACTION) THEN
            NN = 8
            DO N=1,NSPEC
            IF (SPECIES_ID(N).NE.'MIXTURE_FRACTION') NN = NN+1
            ENDDO
      WRITE(TCFORM,'(A,I4.4,A)') "(",NN+1,"(ES13.5E3,','),ES13.5E3)"
      WRITE(LU19,TCFORM) T,(MINT_TOTAL(N),N=0,NN)
      ELSE
      WRITE(TCFORM,'(A,I4.4,A)') "(",NSPEC+1,"(ES13.5E3,','),ES13.5E3)"
      WRITE(LU19,TCFORM) T,(MINT_TOTAL(N),N=0,NSPEC)
      ENDIF
C
      TUSED(7,1) = TUSED(7,1) + SECOND() - TNOW
      END SUBROUTINE DUMP_MASS
C
C
      SUBROUTINE DUMP_BF(T,NM)
C
C Dump boundary quantities into CHID_nn.bf file
C
      REAL(EB) T
      INTEGER ISUM,IG,JG,KG,IOR
      INTEGER, INTENT(IN) :: NM
C
      TNOW=SECOND()
C
      IF (MESH(NM)%NPATCH.EQ.0) RETURN
C
      STIME = T
C
      CALL UNPACK_VAR(NM)
C
      FLOOP: DO NF=1,NBF
C
      LUBF = 1000+100*NM + NF
      WRITE(LUBF) STIME
C
      IND  = ABS(INDBF(NF))
C
C Exterior walls
C
      WLOOP: DO IOR=-3,3
C
      IF (INC(IOR,0).EQ.0 .OR. IOR.EQ.0) CYCLE WLOOP
C
      PP  = 0.
      PPN = 0.
      IBK = 0
C
      IF (IOR.EQ.1 .OR. IOR.EQ.-1) THEN
      IF (IOR.EQ. 1) THEN ; I=0    ; IG=1    ; ENDIF
      IF (IOR.EQ.-1) THEN ; I=IBP1 ; IG=IBAR ; ENDIF
      J1 = 1
      J2 = JBAR
      K1 = 1
      K2 = KBAR
      DO K=K1,K2
      DO J=J1,J2
      IC = ICA(I,J,K)
      IW = IWA(IC,IOR)
      PP(J,K) = TCW(IW,IND,0)
      IF (IV(IW).GT.0 .AND. .NOT.SOLID(ICA(IG,J,K))) IBK(J,K)=1
      ENDDO
      ENDDO
      DO K=K1-1,K2
      DO J=J1-1,J2
      IF (IBK(J,K).EQ.1)     PPN(J,K) = PPN(J,K) + PP(J,K)
      IF (IBK(J+1,K).EQ.1)   PPN(J,K) = PPN(J,K) + PP(J+1,K)
      IF (IBK(J,K+1).EQ.1)   PPN(J,K) = PPN(J,K) + PP(J,K+1)
      IF (IBK(J+1,K+1).EQ.1) PPN(J,K) = PPN(J,K) + PP(J+1,K+1)
      ISUM = IBK(J,K)+IBK(J,K+1)+IBK(J+1,K)+IBK(J+1,K+1)
      IF (ISUM.GT.0) THEN
      PPN(J,K) = PPN(J,K)/REAL(ISUM,EB)
      ELSE
      PPN(J,K) = TCW(0,IND,0)
      ENDIF
      ENDDO
      ENDDO
      WRITE(LUBF) ((PPN(J,K),J=J1-1,J2),K=K1-1,K2)
      ENDIF
C
      IF (IOR.EQ.2 .OR. IOR.EQ.-2) THEN
      IF (IOR.EQ. 2) THEN ; J=0    ; JG=1    ; ENDIF
      IF (IOR.EQ.-2) THEN ; J=JBP1 ; JG=JBAR ; ENDIF
      I1 = 1
      I2 = IBAR
      K1 = 1
      K2 = KBAR
      DO K=K1,K2
      DO I=I1,I2
      IC = ICA(I,J,K)
      IW = IWA(IC,IOR)
      PP(I,K) = TCW(IW,IND,0)
      IF (IV(IW).GT.0 .AND. .NOT.SOLID(ICA(I,JG,K))) IBK(I,K)=1
      ENDDO
      ENDDO
      DO K=K1-1,K2
      DO I=I1-1,I2
      IF (IBK(I,K).EQ.1)     PPN(I,K) = PPN(I,K) + PP(I,K)
      IF (IBK(I+1,K).EQ.1)   PPN(I,K) = PPN(I,K) + PP(I+1,K)
      IF (IBK(I,K+1).EQ.1)   PPN(I,K) = PPN(I,K) + PP(I,K+1)
      IF (IBK(I+1,K+1).EQ.1) PPN(I,K) = PPN(I,K) + PP(I+1,K+1)
      ISUM = IBK(I,K)+IBK(I,K+1)+IBK(I+1,K)+IBK(I+1,K+1)
      IF (ISUM.GT.0) THEN
      PPN(I,K) = PPN(I,K)/REAL(ISUM,EB)
      ELSE
      PPN(I,K) = TCW(0,IND,0)
      ENDIF
      ENDDO
      ENDDO
      WRITE(LUBF) ((PPN(I,K),I=I1-1,I2),K=K1-1,K2)
      ENDIF
C
      IF (IOR.EQ.3 .OR. IOR.EQ.-3) THEN
      IF (IOR.EQ. 3) THEN ; K=0    ; KG=1    ; ENDIF
      IF (IOR.EQ.-3) THEN ; K=KBP1 ; KG=KBAR ; ENDIF
      I1 = 1
      I2 = IBAR
      J1 = 1
      J2 = JBAR
      DO J=J1,J2
      DO I=I1,I2
      IC = ICA(I,J,K)
      IW = IWA(IC,IOR)
      PP(I,J) = TCW(IW,IND,0)
      IF (IV(IW).GT.0 .AND. .NOT.SOLID(ICA(I,J,KG))) IBK(I,J)=1
      ENDDO
      ENDDO
      DO J=J1-1,J2
      DO I=I1-1,I2
      IF (IBK(I,J).EQ.1)     PPN(I,J) = PPN(I,J) + PP(I,J)
      IF (IBK(I+1,J).EQ.1)   PPN(I,J) = PPN(I,J) + PP(I+1,J)
      IF (IBK(I,J+1).EQ.1)   PPN(I,J) = PPN(I,J) + PP(I,J+1)
      IF (IBK(I+1,J+1).EQ.1) PPN(I,J) = PPN(I,J) + PP(I+1,J+1)
      ISUM = IBK(I,J)+IBK(I,J+1)+IBK(I+1,J)+IBK(I+1,J+1)
      IF (ISUM.GT.0) THEN
      PPN(I,J) = PPN(I,J)/REAL(ISUM,EB)
      ELSE
      PPN(I,J) = TCW(0,IND,0)
      ENDIF
      ENDDO
      ENDDO
      WRITE(LUBF) ((PPN(I,J),I=I1-1,I2),J=J1-1,J2)
      ENDIF
C
      ENDDO WLOOP
C
C Interior obstructions
C
      BLOOP: DO N=1,NB
      OB=>OBSTRUCTION(N)
C
      I1 = OB%I1+1
      I2 = OB%I2
      J1 = OB%J1+1
      J2 = OB%J2
      K1 = OB%K1+1
      K2 = OB%K2
C
      OLOOP: DO IOR=-3,3
C
      IF (INC(IOR,N).EQ.0 .OR. IOR.EQ.0) CYCLE OLOOP
C
      PP = 0.
      PPN = 0.
      IBK = 0
C
      IF (IOR.EQ.1 .OR. IOR.EQ.-1) THEN
      IF (IOR.EQ. 1) I=I2+1
      IF (IOR.EQ.-1) I=I1-1
      DO K=K1,K2
      DO J=J1,J2
      IC = ICA(I,J,K)
      IW = IWA(IC,-IOR)
      PP(J,K) = TCW(IW,IND,0)
      IF (IV(IW).GT.0) IBK(J,K)=1
      ENDDO
      ENDDO
      DO K=K1-1,K2
      DO J=J1-1,J2
      IF (IBK(J,K).EQ.1)     PPN(J,K) = PPN(J,K) + PP(J,K)
      IF (IBK(J+1,K).EQ.1)   PPN(J,K) = PPN(J,K) + PP(J+1,K)
      IF (IBK(J,K+1).EQ.1)   PPN(J,K) = PPN(J,K) + PP(J,K+1)
      IF (IBK(J+1,K+1).EQ.1) PPN(J,K) = PPN(J,K) + PP(J+1,K+1)
      ISUM = IBK(J,K)+IBK(J,K+1)+IBK(J+1,K)+IBK(J+1,K+1)
      IF (ISUM.GT.0) THEN
      PPN(J,K) = PPN(J,K)/REAL(ISUM,EB)
      ELSE
      PPN(J,K) = TCW(0,IND,0)
      ENDIF
      ENDDO
      ENDDO
      WRITE(LUBF) ((PPN(J,K),J=J1-1,J2),K=K1-1,K2)
      ENDIF
C
      IF (IOR.EQ.2 .OR. IOR.EQ.-2) THEN
      IF (IOR.EQ. 2) J=J2+1
      IF (IOR.EQ.-2) J=J1-1
      DO K=K1,K2
      DO I=I1,I2
      IC = ICA(I,J,K)
      IW = IWA(IC,-IOR)
      PP(I,K) = TCW(IW,IND,0)
      IF (IV(IW).GT.0) IBK(I,K)=1
      ENDDO
      ENDDO
      DO K=K1-1,K2
      DO I=I1-1,I2
      IF (IBK(I,K).EQ.1)     PPN(I,K) = PPN(I,K) + PP(I,K)
      IF (IBK(I+1,K).EQ.1)   PPN(I,K) = PPN(I,K) + PP(I+1,K)
      IF (IBK(I,K+1).EQ.1)   PPN(I,K) = PPN(I,K) + PP(I,K+1)
      IF (IBK(I+1,K+1).EQ.1) PPN(I,K) = PPN(I,K) + PP(I+1,K+1)
      ISUM = IBK(I,K)+IBK(I,K+1)+IBK(I+1,K)+IBK(I+1,K+1)
      IF (ISUM.GT.0) THEN
      PPN(I,K) = PPN(I,K)/REAL(ISUM,EB)
      ELSE
      PPN(I,K) = TCW(0,IND,0)
      ENDIF
      ENDDO
      ENDDO
      WRITE(LUBF) ((PPN(I,K),I=I1-1,I2),K=K1-1,K2)
      ENDIF
C      
      IF (IOR.EQ.3 .OR. IOR.EQ.-3) THEN
      IF (IOR.EQ. 3) K=K2+1
      IF (IOR.EQ.-3) K=K1-1
      DO J=J1,J2
      DO I=I1,I2
      IC = ICA(I,J,K)
      IW = IWA(IC,-IOR)
      PP(I,J) = TCW(IW,IND,0)
      IF (IV(IW).GT.0) IBK(I,J)=1
      ENDDO
      ENDDO
      DO J=J1-1,J2
      DO I=I1-1,I2
      IF (IBK(I,J).EQ.1)     PPN(I,J) = PPN(I,J) + PP(I,J)
      IF (IBK(I+1,J).EQ.1)   PPN(I,J) = PPN(I,J) + PP(I+1,J)
      IF (IBK(I,J+1).EQ.1)   PPN(I,J) = PPN(I,J) + PP(I,J+1)
      IF (IBK(I+1,J+1).EQ.1) PPN(I,J) = PPN(I,J) + PP(I+1,J+1)
      ISUM = IBK(I,J)+IBK(I,J+1)+IBK(I+1,J)+IBK(I+1,J+1)
      IF (ISUM.GT.0) THEN
      PPN(I,J) = PPN(I,J)/REAL(ISUM,EB)
      ELSE
      PPN(I,J) = TCW(0,IND,0)
      ENDIF
      ENDDO
      ENDDO
      WRITE(LUBF) ((PPN(I,J),I=I1-1,I2),J=J1-1,J2)
      ENDIF
C
      ENDDO OLOOP
C
      ENDDO BLOOP
C
      ENDDO FLOOP
C
      TUSED(7,NM) = TUSED(7,NM) + SECOND() - TNOW
      END SUBROUTINE DUMP_BF
C
C
      SUBROUTINE FLUSH_BUFFERS
C
      INTEGER NM
C
      CALL FLUSH_BUFFER(LU4)
      INQUIRE(UNIT=LU6,OPENED=EX)
      IF (EX) CALL FLUSH_BUFFER(LU6)

      DO NM=1,NMESHES
        IF ( (DROPLET_FILE .AND. .not.EVACUATION_ONLY(NM))
     $       .or.(EVACUATION_ONLY(NM).and.EVACUATION_GRID(NM))) THEN
          LUPF = 7000 + NM
          CALL FLUSH_BUFFER(LUPF)
        ENDIF
      ENDDO
      IF (NTC.GT.0)  CALL FLUSH_BUFFER(LU11)
      IF (NSPR.GT.0) CALL FLUSH_BUFFER(LU12)
      IF (NHD.GT.0)  CALL FLUSH_BUFFER(LU15)
      IF (NSD.GT.0)  CALL FLUSH_BUFFER(LU111)
      CALL FLUSH_BUFFER(LU18)
      IF (NSPEC.GT.0) CALL FLUSH_BUFFER(LU19)
      DO NM=1,NMESHES
      DO N=1,MESH(NM)%NSF
      LUSF = 3000+100*NM + N
      CALL FLUSH_BUFFER(LUSF)
      ENDDO
      DO N=1,NBF
      LUBF = 1000+100*NM + N
      INQUIRE(UNIT=LUBF,OPENED=EX)
      IF (EX) CALL FLUSH_BUFFER(LUBF)
      ENDDO
      ENDDO
C
      END SUBROUTINE FLUSH_BUFFERS
C
C
      SUBROUTINE TIMINGS
C
      REAL(EB) TPCNT(N_TIMERS)
      CHARACTER(6) NAME(N_TIMERS)
      INTEGER NM
C
C Printout subroutine timings
C
      NAME(1)  = 'MAIN '
      NAME(2)  = 'DIVG'
      NAME(3)  = 'MASS'
      NAME(4)  = 'VELO'
      NAME(5)  = 'PRES'
      NAME(6)  = 'PART'
      NAME(7)  = 'DUMP'
      NAME(8)  = 'SPRK'
      NAME(9)  = 'RADI'
      NAME(10) = 'COMB'
      NAME(11) = 'COMM'
C     TIMO_EVAC: Evac timings are added.
      NAME(12) = 'EVAC'
      NAME(13) = 'EVA1'
      NAME(14) = 'EVA2'
      NAME(15) = 'EVA3'
C
      DO NM=1,NMESHES
      TUSED(3,NM) = TUSED(3,NM) - TUSED(9,NM) - TUSED(10,NM)
      DO I=1,N_TIMERS
      TPCNT(I) = 100.*TUSED(I,NM)/TUSED(1,NM)
      ENDDO
      If (EVACUATION_GRID(NM)) THEN
        WRITE(LU6,443) NM,(NAME(I),TUSED(I,NM),TPCNT(I),I=1,N_TIMERS)
      Else
        WRITE(LU6,443) NM,(NAME(I),TUSED(I,NM),TPCNT(I),I=1,N_TIMERS-4)
      End If
      ENDDO
C
  443 FORMAT(//' CPU Time Usage, Mesh ',I3//
     .         '                 CPU s      %  '/
     .         '       ------------------------'/
     .         (7X,A6,2F11.2))
C
      END SUBROUTINE TIMINGS
C
C
      REAL(EB) FUNCTION TCW(IWX,INDX,ITC)
C
      REAL(EB) CONCORR
      INTEGER IWX,INDX,N,IOR,ITC,II1,II2
C
      IF (IWX.EQ.0) THEN
         TCW = TCWA()
         RETURN
         ENDIF
C
      IF (INDX.EQ.4 .OR. INDX.GE.10) THEN
         II  = IJKW(1,IWX)
         JJ  = IJKW(2,IWX)
         KK  = IJKW(3,IWX)
         IIG = IJKW(6,IWX)
         JJG = IJKW(7,IWX)
         KKG = IJKW(8,IWX)
         ENDIF 
C
      SELECT CASE(INDX)
      CASE( 1) ; TCW = QRAD(IWX)*0.001
      CASE( 2) ; TCW = QCONF(IWX)*0.001
      CASE( 3) ; TCW = UW(IWX)
      CASE( 4) ; TCW = TMP(IIG,JJG,KKG) - TMPM
      CASE( 5) ; TCW = TMP_F(IWX) - TMPM
      CASE(12) ; TCW = TMP_B(IWX) - TMPM
      CASE( 6) ; TCW = WALL(IWX)%TMP_S(THERMOCOUPLE(ITC)%I_DEPTH) - TMPM
      CASE( 7) ; TCW = MASSFLUX(IWX,IFUEL)*EXP(-EW(IWX))
      CASE( 8) ; TCW = WMPUA(IWX)
      CASE(18) ; TCW = AWMPUA(IWX)
      CASE( 9) ; TCW = WCPUA(IWX)*0.001
      CASE(10) ; TCW = (QRAD(IWX)+QCONF(IWX))*0.001
      CASE(13) ! Correct cold wall heat flux for rad and convection
        CONCORR = HEAT_TRANS_COEF(IWX)*(TMP_F(IWX)-TMP_GAUGE)
        TCW = (QRAD(IWX)/(E_WALL(IWX)+0.00001)
     .    + SIGMA*(TMP_F(IWX)**4-TMP_GAUGE**4)
     .    + QCONF(IWX) + CONCORR)*0.001
      CASE(31) ! Correct cold wall heat flux for rad only
        TCW = (QRAD(IWX)/(E_WALL(IWX)+0.00001)
     .       + SIGMA*(TMP_F(IWX)**4-TMP_GAUGE**4))*0.001
      CASE(30) ; TCW = HEAT_TRANS_COEF(IWX)
      CASE(19)  
      TCW = ( QRAD(IWX)/(E_WALL(IWX)+0.00001) + 
     .        SIGMA*TMP_F(IWX)**4+QCONF(IWX) )*0.001
      CASE(15) ; TCW = QPYR(IWX)*0.001
      CASE(16) ; TCW = MASS_LOSS(IWX)
      CASE(17) 
      IBC = IJKW(5,IWX)
      IF (DENSITY_F(IBC).GT.0.) THEN
         TCW = MASS_LOSS(IWX)/DENSITY_F(IBC)
         ELSE
         TCW = 0.
         ENDIF
      CASE(20)
      IBC = IJKW(5,IWX)
      IF (PYROLYSIS_MODEL(IBC).EQ.'CHAR') THEN
         II1  = PFRONT_I(IWX)-1.
         II2  = II1+1
         TCW = X_S(II1,IBC) +
     .         (PFRONT_I(IWX)-1.-II1)*(X_S(II2,IBC)-X_S(II1,IBC))
         ELSE
         TCW = 0.
         ENDIF
C
      CASE(14) 
      IBC = IJKW(5,IWX)
      IF (XKS(IBC).GT.0.) THEN
      TCW = 0.001*(WALL(IWX)%TMP_S(0)-WALL(IWX)%TMP_S(1))/
     .        (DXF(IBC)/XKS(IBC))
      ELSE
      TCW = TCWA()
      ENDIF
C
      CASE(11)
         IOR = IJKW(4,IWX)
         IF (ABS(IOR).EQ.1) THEN
            IF (IOR.EQ.-1) U2 = U(IIG,JJG,KKG)**2
            IF (IOR.EQ. 1) U2 = U(II ,JJG,KKG)**2
            V2 = 0.0625*( V(IIG,JJG,KKG)+V(IIG,JJG-1,KKG)+
     .                    V(II ,JJG,KKG)+V(II ,JJG-1,KKG) )**2
            W2 = 0.0625*( W(IIG,JJG,KKG)+W(IIG,JJG,KKG-1)+
     .                    W(II ,JJG,KKG)+W(II ,JJG,KKG-1) )**2
            ENDIF
         IF (ABS(IOR).EQ.2) THEN
            IF (IOR.EQ.-2) V2 = V(IIG,JJG,KKG)**2
            IF (IOR.EQ. 2) V2 = V(IIG,JJ ,KKG)**2
            U2 = 0.0625*( U(IIG,JJG,KKG)+U(IIG-1,JJG,KKG)+
     .                    U(IIG,JJ ,KKG)+U(IIG-1,JJ ,KKG) )**2
            W2 = 0.0625*( W(IIG,JJG,KKG)+W(IIG,JJG,KKG-1)+
     .                    W(IIG,JJ ,KKG)+W(IIG,JJ ,KKG-1) )**2
            ENDIF
         IF (ABS(IOR).EQ.3) THEN
            IF (IOR.EQ.-3) W2 = W(IIG,JJG,KKG)**2
            IF (IOR.EQ. 3) W2 = W(IIG,JJG,KK )**2
            U2 = 0.0625*( U(IIG,JJG,KKG)+U(IIG-1,JJG,KKG)+
     .                    U(IIG,JJG,KK )+U(IIG-1,JJG,KK ) )**2
            V2 = 0.0625*( V(IIG,JJG,KKG)+V(IIG,JJG-1,KKG)+
     .                    V(IIG,JJG,KK )+V(IIG,JJG-1,KK ) )**2
            ENDIF
         HQ2 = 0.5*(U2+V2+W2)
         TCW = (H(IIG,JJG,KKG)-HQ2)/(0.5*CHARACTERISTIC_VELOCITY**2)
      CASE(21:25) 
         N   = INDX-20 
         TCW = MASSFLUX(IWX,N)
      END SELECT
C
C
      CONTAINS
C
      REAL(EB) FUNCTION TCWA()
C
      SELECT CASE(INDX)
      CASE(4:6)    ; TCWA = TMPA - TMPM
      CASE(12)     ; TCWA = TMPA - TMPM
      CASE DEFAULT ; TCWA = 0.
      END SELECT
C
      END FUNCTION TCWA
C
      END FUNCTION TCW
C
C
      SUBROUTINE GET_LAYER_HEIGHT(II,JJ,K_LO,K_HI,
     .                            ZINT,TMPUP,TMPLOW,KAPUP,RADUP)
C
C     Compute the layer height, average upper and lower layer
C     temperatures, and upper layer absorption coefficient
C
      INTEGER, INTENT(IN) :: II,JJ,K_LO,K_HI
      INTEGER :: K
      REAL(EB) :: I_1,I_2,I_3,Z_HI,Z_LO
      REAL(FB), INTENT(OUT) :: TMPLOW,TMPUP,KAPUP,RADUP,ZINT
C
      Z_LO = Z(K_LO-1)
      Z_HI = Z(K_HI)
C
      I_1 = 0.
      I_2 = 0.
      DO K=K_LO,K_HI
      I_1 = I_1 + DZ(K)*TMP(II,JJ,K)
      I_2 = I_2 + DZ(K)/TMP(II,JJ,K)
      ENDDO
C
      TMPLOW = TMP(II,JJ,K_LO)
      ZINT   = (I_1+I_2*TMPLOW**2-2.*TMPLOW*(Z_HI-Z_LO))
C
      IF (ZINT.EQ.0.) THEN
      ZINT = Z_HI-Z_LO
      ELSE
      ZINT = TMPLOW*(I_1*I_2-(Z_HI-Z_LO)**2)/ZINT
      ENDIF
C
      I_1 = 0.
      I_2 = 0.
      I_3 = 0.
      DO K=K_LO,K_HI
      IF (Z(K-1)-Z_LO.GE.ZINT) THEN
         I_1 = I_1 + TMP(II,JJ,K)  *DZ(K)
         I_2 = I_2 + KAPPA(II,JJ,K)*DZ(K)
         I_3 = I_3 + SIGMA*TMP(II,JJ,K)**4*DZ(K)
      ELSEIF (Z(K)-Z_LO.GT.ZINT) THEN
         I_1 = I_1 + TMP(II,JJ,K)  *(Z(K)-Z_LO-ZINT)
         I_2 = I_2 + KAPPA(II,JJ,K)*(Z(K)-Z_LO-ZINT)
         I_3 = I_3 + SIGMA*TMP(II,JJ,K)**4*(Z(K)-Z_LO-ZINT)
      ELSE
      ENDIF
      ENDDO
C
      IF (I_1.EQ.0.) THEN
         TMPUP = TMPLOW
         KAPUP = KAPPA0
         RADUP = SIGMA*TMPA4
         ELSE
         TMPUP = I_1/(Z_HI-Z_LO-ZINT)
         KAPUP = I_2/(Z_HI-Z_LO-ZINT)
         RADUP = I_3/(Z_HI-Z_LO-ZINT)
         ENDIF
c     IF (ABS(TMPLOW-TMPUP).LT.5. .OR. ZINT.LE.0.) THEN
c        TMPUP = TMPLOW
c        KAPUP = KAPPA0
c        RADUP = SIGMA*TMPA4
c        ZINT  = Z_HI-Z_LO
c        ENDIF
C
      END SUBROUTINE GET_LAYER_HEIGHT
C
C
      END MODULE DUMP
